{
  "metadata": {
    "version": "1.0.0",
    "lastUpdated": "2024-03-20",
    "totalTerms": 100,
    "categories": ["Programming Concepts", "Data Structures", "Development Process", "Web Development", "Software Architecture"]
  },
  "vocabulary": [
    {
      "id": "n1",
      "term": "Algorithm",
      "definition": "A step-by-step procedure or formula for solving a problem",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 95,
      "category": "Programming Concepts",
      "example": "A sorting algorithm arranges elements in a specific order",
      "interviewImportance": "high",
      "description": "Fundamental concept in computer science and programming",
      "relatedTerms": ["Function", "Logic", "Procedure"],
      "codeExample": "function bubbleSort(arr) { ... }",
      "commonQuestions": ["What is time complexity?", "How to optimize algorithms?"]
    },
    {
      "id": "n2",
      "term": "Array",
      "definition": "A data structure that stores a collection of elements in a specific order",
      "type": "noun",
      "difficulty": "easy",
      "frequency": 100,
      "category": "Data Structures",
      "example": "const numbers = [1, 2, 3, 4, 5]",
      "interviewImportance": "high",
      "description": "Basic data structure used in most programming languages",
      "relatedTerms": ["List", "Collection", "Index"],
      "codeExample": "let fruits = ['apple', 'banana', 'orange']",
      "commonQuestions": ["How to iterate through an array?", "What is array indexing?"]
    },
    {
      "id": "v1",
      "term": "Debug",
      "definition": "To identify and fix errors in a program",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 90,
      "category": "Development Process",
      "example": "Use console.log to debug the function",
      "interviewImportance": "high",
      "description": "Essential skill for maintaining and improving code",
      "relatedTerms": ["Error", "Testing", "Logging"],
      "codeExample": "console.log('Debugging value:', variable)",
      "commonQuestions": ["What are common debugging techniques?", "How to use breakpoints?"]
    },
    {
      "id": "v2",
      "term": "Compile",
      "definition": "To convert source code into machine-readable format",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Development Process",
      "example": "Compile the TypeScript code to JavaScript",
      "interviewImportance": "medium",
      "description": "Process of transforming code for execution",
      "relatedTerms": ["Build", "Transform", "Execute"],
      "codeExample": "tsc app.ts",
      "commonQuestions": ["What is the compilation process?", "What are compiler errors?"]
    },
    {
      "id": "a1",
      "term": "Asynchronous",
      "definition": "Operations that can run independently of other operations",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 80,
      "category": "Programming Concepts",
      "example": "Asynchronous API calls using async/await",
      "interviewImportance": "high",
      "description": "Important concept for handling non-blocking operations",
      "relatedTerms": ["Promise", "Callback", "Event Loop"],
      "codeExample": "async function fetchData() { ... }",
      "commonQuestions": ["What is the difference between async and sync?", "How to handle promises?"]
    },
    {
      "id": "a2",
      "term": "Static",
      "definition": "Belonging to the class itself rather than instances of the class",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Concepts",
      "example": "Static methods can be called without creating an instance",
      "interviewImportance": "medium",
      "description": "Used for class-level properties and methods",
      "relatedTerms": ["Class", "Method", "Instance"],
      "codeExample": "static getInstance() { ... }",
      "commonQuestions": ["When to use static methods?", "What are static variables?"]
    },
    {
      "id": "n3",
      "term": "Database",
      "definition": "An organized collection of structured information or data",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 90,
      "category": "Data Storage",
      "example": "MySQL is a popular relational database",
      "interviewImportance": "high",
      "description": "Essential for storing and managing application data",
      "relatedTerms": ["SQL", "Query", "Table"],
      "codeExample": "SELECT * FROM users WHERE age > 18",
      "commonQuestions": ["What is CRUD?", "How to optimize database queries?"]
    },
    {
      "id": "n4",
      "term": "API",
      "definition": "Application Programming Interface for software communication",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 95,
      "category": "Web Development",
      "example": "REST API endpoints for data exchange",
      "interviewImportance": "high",
      "description": "Interface for different software systems to communicate",
      "relatedTerms": ["REST", "Endpoint", "HTTP"],
      "codeExample": "fetch('/api/users').then(response => response.json())",
      "commonQuestions": ["What is RESTful API?", "How to handle API errors?"]
    },
    {
      "id": "v3",
      "term": "Deploy",
      "definition": "To make software available for use",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "DevOps",
      "example": "Deploy the application to production servers",
      "interviewImportance": "medium",
      "description": "Process of releasing software to users",
      "relatedTerms": ["Release", "Production", "Deployment"],
      "codeExample": "git push heroku main",
      "commonQuestions": ["What is continuous deployment?", "How to rollback deployments?"]
    },
    {
      "id": "a3",
      "term": "Responsive",
      "definition": "Adapting to different screen sizes and devices",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Web Development",
      "example": "Responsive design works on both mobile and desktop",
      "interviewImportance": "high",
      "description": "Important for modern web development",
      "relatedTerms": ["Mobile-first", "Media Queries", "Flexible"],
      "codeExample": "@media screen and (max-width: 768px) { ... }",
      "commonQuestions": ["What are breakpoints?", "How to test responsive design?"]
    },
    {
      "id": "n5",
      "term": "Framework",
      "definition": "A platform for developing software applications",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 92,
      "category": "Software Development",
      "example": "React is a popular JavaScript framework",
      "interviewImportance": "high",
      "description": "Provides structure and tools for development",
      "relatedTerms": ["Library", "Tool", "Platform"],
      "codeExample": "import { useState } from 'react'",
      "commonQuestions": ["Framework vs Library?", "How to choose a framework?"]
    },
    {
      "id": "v4",
      "term": "Optimize",
      "definition": "To make something as efficient as possible",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 82,
      "category": "Performance",
      "example": "Optimize the code for better performance",
      "interviewImportance": "high",
      "description": "Critical for improving application performance",
      "relatedTerms": ["Performance", "Efficiency", "Speed"],
      "codeExample": "const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b])",
      "commonQuestions": ["How to measure performance?", "What are optimization techniques?"]
    },
    {
      "id": "n6",
      "term": "Cache",
      "definition": "Temporary storage for quick data access",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Performance",
      "example": "Browser cache stores static assets",
      "interviewImportance": "medium",
      "description": "Improves application performance",
      "relatedTerms": ["Memory", "Storage", "Buffer"],
      "codeExample": "localStorage.setItem('user', JSON.stringify(userData))",
      "commonQuestions": ["What is cache invalidation?", "Types of caching?"]
    },
    {
      "id": "a4",
      "term": "Scalable",
      "definition": "Able to handle growing amounts of work",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 80,
      "category": "System Design",
      "example": "A scalable architecture can handle millions of users",
      "interviewImportance": "high",
      "description": "Important for growing applications",
      "relatedTerms": ["Performance", "Load Balancing", "Distributed"],
      "codeExample": "const cluster = require('cluster')",
      "commonQuestions": ["Vertical vs Horizontal scaling?", "How to design scalable systems?"]
    },
    {
      "id": "v5",
      "term": "Authenticate",
      "definition": "To verify the identity of a user or system",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Security",
      "example": "Authenticate user credentials",
      "interviewImportance": "high",
      "description": "Critical for application security",
      "relatedTerms": ["Authorization", "Security", "Login"],
      "codeExample": "const token = jwt.sign({ userId: user.id }, 'secret')",
      "commonQuestions": ["What is JWT?", "How to implement OAuth?"]
    },
    {
      "id": "n7",
      "term": "Middleware",
      "definition": "Software that acts as a bridge between systems",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 82,
      "category": "Software Architecture",
      "example": "Authentication middleware checks user tokens",
      "interviewImportance": "medium",
      "description": "Connects different parts of an application",
      "relatedTerms": ["Express", "Router", "Handler"],
      "codeExample": "app.use(auth.authenticate())",
      "commonQuestions": ["What is middleware chain?", "When to use middleware?"]
    },
    {
      "id": "n8",
      "term": "Repository",
      "definition": "A storage location for code and version history",
      "type": "noun",
      "difficulty": "easy",
      "frequency": 90,
      "category": "Version Control",
      "example": "Git repository stores project code",
      "interviewImportance": "high",
      "description": "Central location for code management",
      "relatedTerms": ["Git", "Version Control", "Branch"],
      "codeExample": "git clone https://github.com/user/repo.git",
      "commonQuestions": ["What is Git?", "How to manage branches?"]
    },
    {
      "id": "v6",
      "term": "Refactor",
      "definition": "To restructure code without changing its behavior",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 78,
      "category": "Code Quality",
      "example": "Refactor the function to improve readability",
      "interviewImportance": "high",
      "description": "Important for maintaining code quality",
      "relatedTerms": ["Clean Code", "Maintenance", "Technical Debt"],
      "codeExample": "// Before: function doStuff() { ... }\n// After: function calculateTotal() { ... }",
      "commonQuestions": ["When to refactor?", "What are refactoring patterns?"]
    },
    {
      "id": "a5",
      "term": "Modular",
      "definition": "Composed of separate, independent units",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Code Organization",
      "example": "Modular code is easier to maintain",
      "interviewImportance": "medium",
      "description": "Helps in organizing and maintaining code",
      "relatedTerms": ["Component", "Module", "Encapsulation"],
      "codeExample": "import { Module } from '@nestjs/common'",
      "commonQuestions": ["Benefits of modularity?", "How to design modular systems?"]
    },
    {
      "id": "n9",
      "term": "Interface",
      "definition": "A contract that defines a type structure",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Type Systems",
      "example": "TypeScript interface defines object shape",
      "interviewImportance": "high",
      "description": "Used for type checking and code organization",
      "relatedTerms": ["Type", "Class", "Contract"],
      "codeExample": "interface User { id: string; name: string; }",
      "commonQuestions": ["Interface vs Type?", "When to use interfaces?"]
    },
    {
      "id": "v7",
      "term": "Serialize",
      "definition": "Convert data structure to a format for storage/transmission",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 82,
      "category": "Data Processing",
      "example": "Serialize object to JSON string",
      "interviewImportance": "medium",
      "description": "Important for data storage and transfer",
      "relatedTerms": ["JSON", "Parse", "Encode"],
      "codeExample": "JSON.stringify(object)",
      "commonQuestions": ["What is serialization?", "JSON vs XML?"]
    },
    {
      "id": "a6",
      "term": "Recursive",
      "definition": "Involving a function that calls itself",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 75,
      "category": "Programming Concepts",
      "example": "Recursive function to traverse tree",
      "interviewImportance": "high",
      "description": "Used for solving complex problems",
      "relatedTerms": ["Stack", "Iteration", "Base Case"],
      "codeExample": "function factorial(n) { return n <= 1 ? 1 : n * factorial(n-1); }",
      "commonQuestions": ["What is base case?", "Recursion vs Iteration?"]
    },
    {
      "id": "n10",
      "term": "Promise",
      "definition": "Object representing eventual completion of async operation",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 92,
      "category": "Asynchronous Programming",
      "example": "Promise handles async data fetching",
      "interviewImportance": "high",
      "description": "Essential for async JavaScript programming",
      "relatedTerms": ["Async/Await", "Callback", "Then"],
      "codeExample": "new Promise((resolve, reject) => { ... })",
      "commonQuestions": ["Promise vs Callback?", "How to handle Promise errors?"]
    },
    {
      "id": "v8",
      "term": "Iterate",
      "definition": "To perform repeatedly through a sequence",
      "type": "verb",
      "difficulty": "easy",
      "frequency": 95,
      "category": "Programming Basics",
      "example": "Iterate through array elements",
      "interviewImportance": "high",
      "description": "Basic programming concept for loops",
      "relatedTerms": ["Loop", "For", "While"],
      "codeExample": "for (let item of items) { ... }",
      "commonQuestions": ["Different types of loops?", "When to use forEach vs for-of?"]
    },
    {
      "id": "n11",
      "term": "Stack",
      "definition": "Last-In-First-Out (LIFO) data structure",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Data Structures",
      "example": "Call stack in program execution",
      "interviewImportance": "high",
      "description": "Fundamental data structure",
      "relatedTerms": ["Queue", "Array", "LIFO"],
      "codeExample": "const stack = []; stack.push(item); stack.pop();",
      "commonQuestions": ["Stack vs Queue?", "Common stack operations?"]
    },
    {
      "id": "a7",
      "term": "Immutable",
      "definition": "Cannot be changed after creation",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Programming Concepts",
      "example": "Immutable state in Redux",
      "interviewImportance": "high",
      "description": "Important for predictable code",
      "relatedTerms": ["Mutable", "State", "Pure"],
      "codeExample": "const frozen = Object.freeze({x: 1})",
      "commonQuestions": ["Benefits of immutability?", "How to enforce immutability?"]
    },
    {
      "id": "v9",
      "term": "Encapsulate",
      "definition": "Hide internal details and provide an interface",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 82,
      "category": "Object-Oriented Programming",
      "example": "Encapsulate data within a class",
      "interviewImportance": "medium",
      "description": "Fundamental OOP principle",
      "relatedTerms": ["Private", "Public", "Interface"],
      "codeExample": "class User { private password; public login() { ... } }",
      "commonQuestions": ["What is encapsulation?", "How to implement in JavaScript?"]
    },
    {
      "id": "n12",
      "term": "Pattern",
      "definition": "Reusable solution to a common problem",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 85,
      "category": "Software Design",
      "example": "Singleton pattern for single instance",
      "interviewImportance": "high",
      "description": "Standard solutions to common problems",
      "relatedTerms": ["Design Pattern", "Architecture", "Solution"],
      "codeExample": "class Singleton { private static instance; }",
      "commonQuestions": ["Common design patterns?", "When to use patterns?"]
    },
    {
      "id": "a8",
      "term": "Declarative",
      "definition": "Expressing what should happen, not how",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Paradigms",
      "example": "SQL is declarative language",
      "interviewImportance": "medium",
      "description": "Modern programming approach",
      "relatedTerms": ["Imperative", "Functional", "React"],
      "codeExample": "const adults = people.filter(p => p.age >= 18)",
      "commonQuestions": ["Declarative vs Imperative?", "Benefits of declarative programming?"]
    },
    {
      "id": "v10",
      "term": "Inject",
      "definition": "Provide dependencies to a component",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 80,
      "category": "Software Design",
      "example": "Dependency injection in Angular",
      "interviewImportance": "medium",
      "description": "Important for loose coupling",
      "relatedTerms": ["Dependency", "IoC", "Service"],
      "codeExample": "@Injectable() class Service { }",
      "commonQuestions": ["What is DI?", "Benefits of dependency injection?"]
    },
    {
      "id": "n13",
      "term": "Thread",
      "definition": "Smallest unit of programmed instructions",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 78,
      "category": "Concurrency",
      "example": "Multi-threaded application",
      "interviewImportance": "medium",
      "description": "Basic unit of CPU utilization",
      "relatedTerms": ["Process", "Concurrent", "Parallel"],
      "codeExample": "new Thread(() => { /* work */ }).start()",
      "commonQuestions": ["Thread vs Process?", "Thread safety?"]
    },
    {
      "id": "n14",
      "term": "Queue",
      "definition": "First-In-First-Out (FIFO) data structure",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Data Structures",
      "example": "Message queue for task processing",
      "interviewImportance": "high",
      "description": "Fundamental data structure for ordered processing",
      "relatedTerms": ["Stack", "Array", "FIFO"],
      "codeExample": "const queue = []; queue.push(item); queue.shift();",
      "commonQuestions": ["Queue operations?", "When to use Queue?"]
    },
    {
      "id": "v11",
      "term": "Validate",
      "definition": "Check if data meets specified criteria",
      "type": "verb",
      "difficulty": "easy",
      "frequency": 92,
      "category": "Data Processing",
      "example": "Validate user input before processing",
      "interviewImportance": "high",
      "description": "Essential for data integrity",
      "relatedTerms": ["Verification", "Check", "Sanitize"],
      "codeExample": "function validateEmail(email) { return email.includes('@'); }",
      "commonQuestions": ["Common validation techniques?", "Client vs Server validation?"]
    },
    {
      "id": "a9",
      "term": "Synchronous",
      "definition": "Operations that execute in sequence",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Concepts",
      "example": "Synchronous function blocks execution",
      "interviewImportance": "high",
      "description": "Basic execution model in programming",
      "relatedTerms": ["Asynchronous", "Blocking", "Sequential"],
      "codeExample": "const result = database.query()",
      "commonQuestions": ["Sync vs Async?", "When to use sync operations?"]
    },
    {
      "id": "n15",
      "term": "Event",
      "definition": "Action or occurrence detected by program",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 90,
      "category": "Programming Concepts",
      "example": "Click event in web applications",
      "interviewImportance": "high",
      "description": "Core concept in event-driven programming",
      "relatedTerms": ["Listener", "Handler", "Callback"],
      "codeExample": "element.addEventListener('click', handler)",
      "commonQuestions": ["Event bubbling?", "Event delegation?"]
    },
    {
      "id": "v12",
      "term": "Subscribe",
      "definition": "Register to receive updates or notifications",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Patterns",
      "example": "Subscribe to data stream updates",
      "interviewImportance": "medium",
      "description": "Common in reactive programming",
      "relatedTerms": ["Observer", "Publisher", "Event"],
      "codeExample": "observable.subscribe(data => console.log(data))",
      "commonQuestions": ["Observer pattern?", "Memory leaks in subscriptions?"]
    },
    {
      "id": "a10",
      "term": "Concurrent",
      "definition": "Multiple computations executing simultaneously",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 80,
      "category": "System Design",
      "example": "Concurrent request handling",
      "interviewImportance": "high",
      "description": "Important for system scalability",
      "relatedTerms": ["Parallel", "Async", "Thread"],
      "codeExample": "Promise.all([task1(), task2()])",
      "commonQuestions": ["Concurrency vs Parallelism?", "Concurrency challenges?"]
    },
    {
      "id": "n16",
      "term": "Protocol",
      "definition": "Set of rules for data communication",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Networking",
      "example": "HTTP protocol for web communication",
      "interviewImportance": "high",
      "description": "Standards for system communication",
      "relatedTerms": ["HTTP", "TCP", "API"],
      "codeExample": "https://api.example.com/data",
      "commonQuestions": ["Common protocols?", "Protocol layers?"]
    },
    {
      "id": "v13",
      "term": "Parse",
      "definition": "Convert data from one format to another",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Data Processing",
      "example": "Parse JSON string to object",
      "interviewImportance": "high",
      "description": "Essential for data processing",
      "relatedTerms": ["JSON", "XML", "Deserialize"],
      "codeExample": "JSON.parse(jsonString)",
      "commonQuestions": ["Parsing techniques?", "Error handling in parsing?"]
    },
    {
      "id": "a11",
      "term": "Polymorphic",
      "definition": "Having multiple forms or implementations",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 78,
      "category": "Object-Oriented Programming",
      "example": "Polymorphic method behavior",
      "interviewImportance": "high",
      "description": "Core concept in OOP",
      "relatedTerms": ["Inheritance", "Override", "Interface"],
      "codeExample": "class Animal { speak() {} } class Dog extends Animal { speak() { return 'Woof'; } }",
      "commonQuestions": ["Types of polymorphism?", "When to use polymorphism?"]
    },
    {
      "id": "n17",
      "term": "Token",
      "definition": "Authentication credential or identifier",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Security",
      "example": "JWT token for authentication",
      "interviewImportance": "high",
      "description": "Used for secure communication",
      "relatedTerms": ["JWT", "Authentication", "Bearer"],
      "codeExample": "Authorization: Bearer eyJhbGciOiJIUzI1NiIs...",
      "commonQuestions": ["Token types?", "Token security best practices?"]
    },
    {
      "id": "v14",
      "term": "Encrypt",
      "definition": "Convert data into a secure format",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 82,
      "category": "Security",
      "example": "Encrypt sensitive data",
      "interviewImportance": "high",
      "description": "Essential for data security",
      "relatedTerms": ["Decrypt", "Cryptography", "Hash"],
      "codeExample": "crypto.encrypt(data, key)",
      "commonQuestions": ["Encryption types?", "When to encrypt data?"]
    },
    {
      "id": "n18",
      "term": "Endpoint",
      "definition": "URL where API service can be accessed",
      "type": "noun",
      "difficulty": "easy",
      "frequency": 92,
      "category": "Web Development",
      "example": "REST API endpoint",
      "interviewImportance": "high",
      "description": "Interface point for API communication",
      "relatedTerms": ["API", "Route", "URL"],
      "codeExample": "app.get('/api/users', handler)",
      "commonQuestions": ["RESTful endpoints?", "Endpoint security?"]
    },
    {
      "id": "v15",
      "term": "Mock",
      "definition": "Create simulated objects for testing",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Testing",
      "example": "Mock database connection",
      "interviewImportance": "high",
      "description": "Important for unit testing",
      "relatedTerms": ["Test", "Stub", "Spy"],
      "codeExample": "jest.mock('./database')",
      "commonQuestions": ["Mock vs Stub?", "When to use mocks?"]
    },
    {
      "id": "a12",
      "term": "Idempotent",
      "definition": "Operation that produces same result when repeated",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 75,
      "category": "API Design",
      "example": "GET requests are idempotent",
      "interviewImportance": "medium",
      "description": "Important for API reliability",
      "relatedTerms": ["REST", "HTTP", "Safe"],
      "codeExample": "PUT /api/users/123 { name: 'John' }",
      "commonQuestions": ["Idempotent methods?", "Why is idempotency important?"]
    },
    {
      "id": "n19",
      "term": "Middleware",
      "definition": "Software that connects components or applications",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Software Architecture",
      "example": "Authentication middleware",
      "interviewImportance": "high",
      "description": "Common in web frameworks",
      "relatedTerms": ["Express", "Pipeline", "Handler"],
      "codeExample": "app.use(authMiddleware)",
      "commonQuestions": ["Common middleware uses?", "Middleware chain?"]
    },
    {
      "id": "v16",
      "term": "Deploy",
      "definition": "Release software to production environment",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "DevOps",
      "example": "Deploy application to cloud",
      "interviewImportance": "high",
      "description": "Critical for software delivery",
      "relatedTerms": ["CI/CD", "Release", "Production"],
      "codeExample": "git push heroku main",
      "commonQuestions": ["Deployment strategies?", "Deployment automation?"]
    }
  ]
} 