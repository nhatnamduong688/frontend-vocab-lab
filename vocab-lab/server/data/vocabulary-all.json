{
  "metadata": {
    "version": "1.0.0",
    "lastUpdated": "2025-05-20T14:02:23.262Z",
    "totalTerms": 140,
    "categories": [
      "Programming Concepts",
      "Data Structures",
      "Development Process",
      "Web Development",
      "Software Architecture",
      "Frontend Frameworks",
      "CSS Concepts",
      "TypeScript",
      "Performance",
      "Browser APIs",
      "UI Components",
      "Navigation Components",
      "Layout Components",
      "Feedback Components",
      "Data Display Components"
    ]
  },
  "vocabulary": [
    {
      "id": "n1",
      "term": "Algorithm",
      "definition": "A step-by-step procedure or formula for solving a problem",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 95,
      "category": "Programming Concepts",
      "example": "A sorting algorithm arranges elements in a specific order",
      "interviewImportance": "high",
      "description": "Fundamental concept in computer science and programming",
      "relatedTerms": [
        "Function",
        "Logic",
        "Procedure"
      ],
      "codeExample": "function bubbleSort(arr) { ... }",
      "commonQuestions": [
        "What is time complexity?",
        "How to optimize algorithms?"
      ]
    },
    {
      "id": "n2",
      "term": "Array",
      "definition": "A data structure that stores a collection of elements in a specific order",
      "type": "noun",
      "difficulty": "easy",
      "frequency": 100,
      "category": "Data Structures",
      "example": "const numbers = [1, 2, 3, 4, 5]",
      "interviewImportance": "high",
      "description": "Basic data structure used in most programming languages",
      "relatedTerms": [
        "List",
        "Collection",
        "Index"
      ],
      "codeExample": "let fruits = ['apple', 'banana', 'orange']",
      "commonQuestions": [
        "How to iterate through an array?",
        "What is array indexing?"
      ]
    },
    {
      "id": "v1",
      "term": "Debug",
      "definition": "To identify and fix errors in a program",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 90,
      "category": "Development Process",
      "example": "Use console.log to debug the function",
      "interviewImportance": "high",
      "description": "Essential skill for maintaining and improving code",
      "relatedTerms": [
        "Error",
        "Testing",
        "Logging"
      ],
      "codeExample": "console.log('Debugging value:', variable)",
      "commonQuestions": [
        "What are common debugging techniques?",
        "How to use breakpoints?"
      ]
    },
    {
      "id": "v2",
      "term": "Compile",
      "definition": "To convert source code into machine-readable format",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Development Process",
      "example": "Compile the TypeScript code to JavaScript",
      "interviewImportance": "medium",
      "description": "Process of transforming code for execution",
      "relatedTerms": [
        "Build",
        "Transform",
        "Execute"
      ],
      "codeExample": "tsc app.ts",
      "commonQuestions": [
        "What is the compilation process?",
        "What are compiler errors?"
      ]
    },
    {
      "id": "a1",
      "term": "Asynchronous",
      "definition": "Operations that can run independently of other operations",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 80,
      "category": "Programming Concepts",
      "example": "Asynchronous API calls using async/await",
      "interviewImportance": "high",
      "description": "Important concept for handling non-blocking operations",
      "relatedTerms": [
        "Promise",
        "Callback",
        "Event Loop"
      ],
      "codeExample": "async function fetchData() { ... }",
      "commonQuestions": [
        "What is the difference between async and sync?",
        "How to handle promises?"
      ]
    },
    {
      "id": "a2",
      "term": "Static",
      "definition": "Belonging to the class itself rather than instances of the class",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Concepts",
      "example": "Static methods can be called without creating an instance",
      "interviewImportance": "medium",
      "description": "Used for class-level properties and methods",
      "relatedTerms": [
        "Class",
        "Method",
        "Instance"
      ],
      "codeExample": "static getInstance() { ... }",
      "commonQuestions": [
        "When to use static methods?",
        "What are static variables?"
      ]
    },
    {
      "id": "n3",
      "term": "Database",
      "definition": "An organized collection of structured information or data",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 90,
      "category": "Data Storage",
      "example": "MySQL is a popular relational database",
      "interviewImportance": "high",
      "description": "Essential for storing and managing application data",
      "relatedTerms": [
        "SQL",
        "Query",
        "Table"
      ],
      "codeExample": "SELECT * FROM users WHERE age > 18",
      "commonQuestions": [
        "What is CRUD?",
        "How to optimize database queries?"
      ]
    },
    {
      "id": "n4",
      "term": "API",
      "definition": "Application Programming Interface for software communication",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 95,
      "category": "Web Development",
      "example": "REST API endpoints for data exchange",
      "interviewImportance": "high",
      "description": "Interface for different software systems to communicate",
      "relatedTerms": [
        "REST",
        "Endpoint",
        "HTTP"
      ],
      "codeExample": "fetch('/api/users').then(response => response.json())",
      "commonQuestions": [
        "What is RESTful API?",
        "How to handle API errors?"
      ]
    },
    {
      "id": "v3",
      "term": "Deploy",
      "definition": "To make software available for use",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "DevOps",
      "example": "Deploy the application to production servers",
      "interviewImportance": "medium",
      "description": "Process of releasing software to users",
      "relatedTerms": [
        "Release",
        "Production",
        "Deployment"
      ],
      "codeExample": "git push heroku main",
      "commonQuestions": [
        "What is continuous deployment?",
        "How to rollback deployments?"
      ]
    },
    {
      "id": "a3",
      "term": "Responsive",
      "definition": "Adapting to different screen sizes and devices",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Web Development",
      "example": "Responsive design works on both mobile and desktop",
      "interviewImportance": "high",
      "description": "Important for modern web development",
      "relatedTerms": [
        "Mobile-first",
        "Media Queries",
        "Flexible"
      ],
      "codeExample": "@media screen and (max-width: 768px) { ... }",
      "commonQuestions": [
        "What are breakpoints?",
        "How to test responsive design?"
      ]
    },
    {
      "id": "n5",
      "term": "Framework",
      "definition": "A platform for developing software applications",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 92,
      "category": "Software Development",
      "example": "React is a popular JavaScript framework",
      "interviewImportance": "high",
      "description": "Provides structure and tools for development",
      "relatedTerms": [
        "Library",
        "Tool",
        "Platform"
      ],
      "codeExample": "import { useState } from 'react'",
      "commonQuestions": [
        "Framework vs Library?",
        "How to choose a framework?"
      ]
    },
    {
      "id": "v4",
      "term": "Optimize",
      "definition": "To make something as efficient as possible",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 82,
      "category": "Performance",
      "example": "Optimize the code for better performance",
      "interviewImportance": "high",
      "description": "Critical for improving application performance",
      "relatedTerms": [
        "Performance",
        "Efficiency",
        "Speed"
      ],
      "codeExample": "const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b])",
      "commonQuestions": [
        "How to measure performance?",
        "What are optimization techniques?"
      ]
    },
    {
      "id": "n6",
      "term": "Cache",
      "definition": "Temporary storage for quick data access",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Performance",
      "example": "Browser cache stores static assets",
      "interviewImportance": "medium",
      "description": "Improves application performance",
      "relatedTerms": [
        "Memory",
        "Storage",
        "Buffer"
      ],
      "codeExample": "localStorage.setItem('user', JSON.stringify(userData))",
      "commonQuestions": [
        "What is cache invalidation?",
        "Types of caching?"
      ]
    },
    {
      "id": "a4",
      "term": "Scalable",
      "definition": "Able to handle growing amounts of work",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 80,
      "category": "System Design",
      "example": "A scalable architecture can handle millions of users",
      "interviewImportance": "high",
      "description": "Important for growing applications",
      "relatedTerms": [
        "Performance",
        "Load Balancing",
        "Distributed"
      ],
      "codeExample": "const cluster = require('cluster')",
      "commonQuestions": [
        "Vertical vs Horizontal scaling?",
        "How to design scalable systems?"
      ]
    },
    {
      "id": "v5",
      "term": "Authenticate",
      "definition": "To verify the identity of a user or system",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Security",
      "example": "Authenticate user credentials",
      "interviewImportance": "high",
      "description": "Critical for application security",
      "relatedTerms": [
        "Authorization",
        "Security",
        "Login"
      ],
      "codeExample": "const token = jwt.sign({ userId: user.id }, 'secret')",
      "commonQuestions": [
        "What is JWT?",
        "How to implement OAuth?"
      ]
    },
    {
      "id": "n7",
      "term": "Middleware",
      "definition": "Software that acts as a bridge between systems",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 82,
      "category": "Software Architecture",
      "example": "Authentication middleware checks user tokens",
      "interviewImportance": "medium",
      "description": "Connects different parts of an application",
      "relatedTerms": [
        "Express",
        "Router",
        "Handler"
      ],
      "codeExample": "app.use(auth.authenticate())",
      "commonQuestions": [
        "What is middleware chain?",
        "When to use middleware?"
      ]
    },
    {
      "id": "n8",
      "term": "Repository",
      "definition": "A storage location for code and version history",
      "type": "noun",
      "difficulty": "easy",
      "frequency": 90,
      "category": "Version Control",
      "example": "Git repository stores project code",
      "interviewImportance": "high",
      "description": "Central location for code management",
      "relatedTerms": [
        "Git",
        "Version Control",
        "Branch"
      ],
      "codeExample": "git clone https://github.com/user/repo.git",
      "commonQuestions": [
        "What is Git?",
        "How to manage branches?"
      ]
    },
    {
      "id": "v6",
      "term": "Refactor",
      "definition": "To restructure code without changing its behavior",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 78,
      "category": "Code Quality",
      "example": "Refactor the function to improve readability",
      "interviewImportance": "high",
      "description": "Important for maintaining code quality",
      "relatedTerms": [
        "Clean Code",
        "Maintenance",
        "Technical Debt"
      ],
      "codeExample": "// Before: function doStuff() { ... }\n// After: function calculateTotal() { ... }",
      "commonQuestions": [
        "When to refactor?",
        "What are refactoring patterns?"
      ]
    },
    {
      "id": "a5",
      "term": "Modular",
      "definition": "Composed of separate, independent units",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Code Organization",
      "example": "Modular code is easier to maintain",
      "interviewImportance": "medium",
      "description": "Helps in organizing and maintaining code",
      "relatedTerms": [
        "Component",
        "Module",
        "Encapsulation"
      ],
      "codeExample": "import { Module } from '@nestjs/common'",
      "commonQuestions": [
        "Benefits of modularity?",
        "How to design modular systems?"
      ]
    },
    {
      "id": "n9",
      "term": "Interface",
      "definition": "A contract that defines a type structure",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Type Systems",
      "example": "TypeScript interface defines object shape",
      "interviewImportance": "high",
      "description": "Used for type checking and code organization",
      "relatedTerms": [
        "Type",
        "Class",
        "Contract"
      ],
      "codeExample": "interface User { id: string; name: string; }",
      "commonQuestions": [
        "Interface vs Type?",
        "When to use interfaces?"
      ]
    },
    {
      "id": "v7",
      "term": "Serialize",
      "definition": "Convert data structure to a format for storage/transmission",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 82,
      "category": "Data Processing",
      "example": "Serialize object to JSON string",
      "interviewImportance": "medium",
      "description": "Important for data storage and transfer",
      "relatedTerms": [
        "JSON",
        "Parse",
        "Encode"
      ],
      "codeExample": "JSON.stringify(object)",
      "commonQuestions": [
        "What is serialization?",
        "JSON vs XML?"
      ]
    },
    {
      "id": "a6",
      "term": "Recursive",
      "definition": "Involving a function that calls itself",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 75,
      "category": "Programming Concepts",
      "example": "Recursive function to traverse tree",
      "interviewImportance": "high",
      "description": "Used for solving complex problems",
      "relatedTerms": [
        "Stack",
        "Iteration",
        "Base Case"
      ],
      "codeExample": "function factorial(n) { return n <= 1 ? 1 : n * factorial(n-1); }",
      "commonQuestions": [
        "What is base case?",
        "Recursion vs Iteration?"
      ]
    },
    {
      "id": "n10",
      "term": "Promise",
      "definition": "Object representing eventual completion of async operation",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 92,
      "category": "Asynchronous Programming",
      "example": "Promise handles async data fetching",
      "interviewImportance": "high",
      "description": "Essential for async JavaScript programming",
      "relatedTerms": [
        "Async/Await",
        "Callback",
        "Then"
      ],
      "codeExample": "new Promise((resolve, reject) => { ... })",
      "commonQuestions": [
        "Promise vs Callback?",
        "How to handle Promise errors?"
      ]
    },
    {
      "id": "v8",
      "term": "Iterate",
      "definition": "To perform repeatedly through a sequence",
      "type": "verb",
      "difficulty": "easy",
      "frequency": 95,
      "category": "Programming Basics",
      "example": "Iterate through array elements",
      "interviewImportance": "high",
      "description": "Basic programming concept for loops",
      "relatedTerms": [
        "Loop",
        "For",
        "While"
      ],
      "codeExample": "for (let item of items) { ... }",
      "commonQuestions": [
        "Different types of loops?",
        "When to use forEach vs for-of?"
      ]
    },
    {
      "id": "n11",
      "term": "Stack",
      "definition": "Last-In-First-Out (LIFO) data structure",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Data Structures",
      "example": "Call stack in program execution",
      "interviewImportance": "high",
      "description": "Fundamental data structure",
      "relatedTerms": [
        "Queue",
        "Array",
        "LIFO"
      ],
      "codeExample": "const stack = []; stack.push(item); stack.pop();",
      "commonQuestions": [
        "Stack vs Queue?",
        "Common stack operations?"
      ]
    },
    {
      "id": "a7",
      "term": "Immutable",
      "definition": "Cannot be changed after creation",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Programming Concepts",
      "example": "Immutable state in Redux",
      "interviewImportance": "high",
      "description": "Important for predictable code",
      "relatedTerms": [
        "Mutable",
        "State",
        "Pure"
      ],
      "codeExample": "const frozen = Object.freeze({x: 1})",
      "commonQuestions": [
        "Benefits of immutability?",
        "How to enforce immutability?"
      ]
    },
    {
      "id": "v9",
      "term": "Encapsulate",
      "definition": "Hide internal details and provide an interface",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 82,
      "category": "Object-Oriented Programming",
      "example": "Encapsulate data within a class",
      "interviewImportance": "medium",
      "description": "Fundamental OOP principle",
      "relatedTerms": [
        "Private",
        "Public",
        "Interface"
      ],
      "codeExample": "class User { private password; public login() { ... } }",
      "commonQuestions": [
        "What is encapsulation?",
        "How to implement in JavaScript?"
      ]
    },
    {
      "id": "n12",
      "term": "Pattern",
      "definition": "Reusable solution to a common problem",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 85,
      "category": "Software Design",
      "example": "Singleton pattern for single instance",
      "interviewImportance": "high",
      "description": "Standard solutions to common problems",
      "relatedTerms": [
        "Design Pattern",
        "Architecture",
        "Solution"
      ],
      "codeExample": "class Singleton { private static instance; }",
      "commonQuestions": [
        "Common design patterns?",
        "When to use patterns?"
      ]
    },
    {
      "id": "a8",
      "term": "Declarative",
      "definition": "Expressing what should happen, not how",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Paradigms",
      "example": "SQL is declarative language",
      "interviewImportance": "medium",
      "description": "Modern programming approach",
      "relatedTerms": [
        "Imperative",
        "Functional",
        "React"
      ],
      "codeExample": "const adults = people.filter(p => p.age >= 18)",
      "commonQuestions": [
        "Declarative vs Imperative?",
        "Benefits of declarative programming?"
      ]
    },
    {
      "id": "v10",
      "term": "Inject",
      "definition": "Provide dependencies to a component",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 80,
      "category": "Software Design",
      "example": "Dependency injection in Angular",
      "interviewImportance": "medium",
      "description": "Important for loose coupling",
      "relatedTerms": [
        "Dependency",
        "IoC",
        "Service"
      ],
      "codeExample": "@Injectable() class Service { }",
      "commonQuestions": [
        "What is DI?",
        "Benefits of dependency injection?"
      ]
    },
    {
      "id": "n13",
      "term": "Thread",
      "definition": "Smallest unit of programmed instructions",
      "type": "noun",
      "difficulty": "hard",
      "frequency": 78,
      "category": "Concurrency",
      "example": "Multi-threaded application",
      "interviewImportance": "medium",
      "description": "Basic unit of CPU utilization",
      "relatedTerms": [
        "Process",
        "Concurrent",
        "Parallel"
      ],
      "codeExample": "new Thread(() => { /* work */ }).start()",
      "commonQuestions": [
        "Thread vs Process?",
        "Thread safety?"
      ]
    },
    {
      "id": "n14",
      "term": "Queue",
      "definition": "First-In-First-Out (FIFO) data structure",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Data Structures",
      "example": "Message queue for task processing",
      "interviewImportance": "high",
      "description": "Fundamental data structure for ordered processing",
      "relatedTerms": [
        "Stack",
        "Array",
        "FIFO"
      ],
      "codeExample": "const queue = []; queue.push(item); queue.shift();",
      "commonQuestions": [
        "Queue operations?",
        "When to use Queue?"
      ]
    },
    {
      "id": "v11",
      "term": "Validate",
      "definition": "Check if data meets specified criteria",
      "type": "verb",
      "difficulty": "easy",
      "frequency": 92,
      "category": "Data Processing",
      "example": "Validate user input before processing",
      "interviewImportance": "high",
      "description": "Essential for data integrity",
      "relatedTerms": [
        "Verification",
        "Check",
        "Sanitize"
      ],
      "codeExample": "function validateEmail(email) { return email.includes('@'); }",
      "commonQuestions": [
        "Common validation techniques?",
        "Client vs Server validation?"
      ]
    },
    {
      "id": "a9",
      "term": "Synchronous",
      "definition": "Operations that execute in sequence",
      "type": "adjective",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Concepts",
      "example": "Synchronous function blocks execution",
      "interviewImportance": "high",
      "description": "Basic execution model in programming",
      "relatedTerms": [
        "Asynchronous",
        "Blocking",
        "Sequential"
      ],
      "codeExample": "const result = database.query()",
      "commonQuestions": [
        "Sync vs Async?",
        "When to use sync operations?"
      ]
    },
    {
      "id": "n15",
      "term": "Event",
      "definition": "Action or occurrence detected by program",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 90,
      "category": "Programming Concepts",
      "example": "Click event in web applications",
      "interviewImportance": "high",
      "description": "Core concept in event-driven programming",
      "relatedTerms": [
        "Listener",
        "Handler",
        "Callback"
      ],
      "codeExample": "element.addEventListener('click', handler)",
      "commonQuestions": [
        "Event bubbling?",
        "Event delegation?"
      ]
    },
    {
      "id": "v12",
      "term": "Subscribe",
      "definition": "Register to receive updates or notifications",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Programming Patterns",
      "example": "Subscribe to data stream updates",
      "interviewImportance": "medium",
      "description": "Common in reactive programming",
      "relatedTerms": [
        "Observer",
        "Publisher",
        "Event"
      ],
      "codeExample": "observable.subscribe(data => console.log(data))",
      "commonQuestions": [
        "Observer pattern?",
        "Memory leaks in subscriptions?"
      ]
    },
    {
      "id": "a10",
      "term": "Concurrent",
      "definition": "Multiple computations executing simultaneously",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 80,
      "category": "System Design",
      "example": "Concurrent request handling",
      "interviewImportance": "high",
      "description": "Important for system scalability",
      "relatedTerms": [
        "Parallel",
        "Async",
        "Thread"
      ],
      "codeExample": "Promise.all([task1(), task2()])",
      "commonQuestions": [
        "Concurrency vs Parallelism?",
        "Concurrency challenges?"
      ]
    },
    {
      "id": "n16",
      "term": "Protocol",
      "definition": "Set of rules for data communication",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Networking",
      "example": "HTTP protocol for web communication",
      "interviewImportance": "high",
      "description": "Standards for system communication",
      "relatedTerms": [
        "HTTP",
        "TCP",
        "API"
      ],
      "codeExample": "https://api.example.com/data",
      "commonQuestions": [
        "Common protocols?",
        "Protocol layers?"
      ]
    },
    {
      "id": "v13",
      "term": "Parse",
      "definition": "Convert data from one format to another",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Data Processing",
      "example": "Parse JSON string to object",
      "interviewImportance": "high",
      "description": "Essential for data processing",
      "relatedTerms": [
        "JSON",
        "XML",
        "Deserialize"
      ],
      "codeExample": "JSON.parse(jsonString)",
      "commonQuestions": [
        "Parsing techniques?",
        "Error handling in parsing?"
      ]
    },
    {
      "id": "a11",
      "term": "Polymorphic",
      "definition": "Having multiple forms or implementations",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 78,
      "category": "Object-Oriented Programming",
      "example": "Polymorphic method behavior",
      "interviewImportance": "high",
      "description": "Core concept in OOP",
      "relatedTerms": [
        "Inheritance",
        "Override",
        "Interface"
      ],
      "codeExample": "class Animal { speak() {} } class Dog extends Animal { speak() { return 'Woof'; } }",
      "commonQuestions": [
        "Types of polymorphism?",
        "When to use polymorphism?"
      ]
    },
    {
      "id": "n17",
      "term": "Token",
      "definition": "Authentication credential or identifier",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Security",
      "example": "JWT token for authentication",
      "interviewImportance": "high",
      "description": "Used for secure communication",
      "relatedTerms": [
        "JWT",
        "Authentication",
        "Bearer"
      ],
      "codeExample": "Authorization: Bearer eyJhbGciOiJIUzI1NiIs...",
      "commonQuestions": [
        "Token types?",
        "Token security best practices?"
      ]
    },
    {
      "id": "v14",
      "term": "Encrypt",
      "definition": "Convert data into a secure format",
      "type": "verb",
      "difficulty": "hard",
      "frequency": 82,
      "category": "Security",
      "example": "Encrypt sensitive data",
      "interviewImportance": "high",
      "description": "Essential for data security",
      "relatedTerms": [
        "Decrypt",
        "Cryptography",
        "Hash"
      ],
      "codeExample": "crypto.encrypt(data, key)",
      "commonQuestions": [
        "Encryption types?",
        "When to encrypt data?"
      ]
    },
    {
      "id": "n18",
      "term": "Endpoint",
      "definition": "URL where API service can be accessed",
      "type": "noun",
      "difficulty": "easy",
      "frequency": 92,
      "category": "Web Development",
      "example": "REST API endpoint",
      "interviewImportance": "high",
      "description": "Interface point for API communication",
      "relatedTerms": [
        "API",
        "Route",
        "URL"
      ],
      "codeExample": "app.get('/api/users', handler)",
      "commonQuestions": [
        "RESTful endpoints?",
        "Endpoint security?"
      ]
    },
    {
      "id": "v15",
      "term": "Mock",
      "definition": "Create simulated objects for testing",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "Testing",
      "example": "Mock database connection",
      "interviewImportance": "high",
      "description": "Important for unit testing",
      "relatedTerms": [
        "Test",
        "Stub",
        "Spy"
      ],
      "codeExample": "jest.mock('./database')",
      "commonQuestions": [
        "Mock vs Stub?",
        "When to use mocks?"
      ]
    },
    {
      "id": "a12",
      "term": "Idempotent",
      "definition": "Operation that produces same result when repeated",
      "type": "adjective",
      "difficulty": "hard",
      "frequency": 75,
      "category": "API Design",
      "example": "GET requests are idempotent",
      "interviewImportance": "medium",
      "description": "Important for API reliability",
      "relatedTerms": [
        "REST",
        "HTTP",
        "Safe"
      ],
      "codeExample": "PUT /api/users/123 { name: 'John' }",
      "commonQuestions": [
        "Idempotent methods?",
        "Why is idempotency important?"
      ]
    },
    {
      "id": "n19",
      "term": "Middleware",
      "definition": "Software that connects components or applications",
      "type": "noun",
      "difficulty": "medium",
      "frequency": 88,
      "category": "Software Architecture",
      "example": "Authentication middleware",
      "interviewImportance": "high",
      "description": "Common in web frameworks",
      "relatedTerms": [
        "Express",
        "Pipeline",
        "Handler"
      ],
      "codeExample": "app.use(authMiddleware)",
      "commonQuestions": [
        "Common middleware uses?",
        "Middleware chain?"
      ]
    },
    {
      "id": "v16",
      "term": "Deploy",
      "definition": "Release software to production environment",
      "type": "verb",
      "difficulty": "medium",
      "frequency": 85,
      "category": "DevOps",
      "example": "Deploy application to cloud",
      "interviewImportance": "high",
      "description": "Critical for software delivery",
      "relatedTerms": [
        "CI/CD",
        "Release",
        "Production"
      ],
      "codeExample": "git push heroku main",
      "commonQuestions": [
        "Deployment strategies?",
        "Deployment automation?"
      ]
    },
    {
      "id": "af9m2d9ldf",
      "frequency": 20,
      "description": "A JavaScript library for building user interfaces, particularly single-page applications.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "React",
      "definition": "A JavaScript library for building user interfaces, particularly single-page applications.",
      "type": "framework",
      "difficulty": "medium",
      "category": "Frontend Frameworks",
      "example": "React components are reusable pieces of code that return React elements describing what should appear on the screen.",
      "interviewImportance": "high"
    },
    {
      "id": "pyp1ml7jk0",
      "frequency": 91,
      "description": "A progressive JavaScript framework for building user interfaces with a focus on declarative rendering and component composition.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Vue",
      "definition": "A progressive JavaScript framework for building user interfaces with a focus on declarative rendering and component composition.",
      "type": "framework",
      "difficulty": "medium",
      "category": "Frontend Frameworks",
      "example": "Vue combines the best aspects of Angular and React while being more lightweight and flexible.",
      "interviewImportance": "medium"
    },
    {
      "id": "mzos1kbtxd",
      "frequency": 85,
      "description": "A platform and framework for building single-page client applications using HTML and TypeScript.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Angular",
      "definition": "A platform and framework for building single-page client applications using HTML and TypeScript.",
      "type": "framework",
      "difficulty": "hard",
      "category": "Frontend Frameworks",
      "example": "Angular provides built-in features like routing, form validation, and HTTP client.",
      "interviewImportance": "medium"
    },
    {
      "id": "i3bp96lfo6",
      "frequency": 45,
      "description": "A two-dimensional grid-based layout system designed for organizing content on web pages.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "CSS Grid",
      "definition": "A two-dimensional grid-based layout system designed for organizing content on web pages.",
      "type": "technique",
      "difficulty": "medium",
      "category": "CSS Concepts",
      "example": "CSS Grid allows developers to create complex layouts with rows and columns simultaneously.",
      "interviewImportance": "medium"
    },
    {
      "id": "si2shuxf2x",
      "frequency": 38,
      "description": "A one-dimensional layout method for arranging items in rows or columns, with flexible container dimensions.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Flexbox",
      "definition": "A one-dimensional layout method for arranging items in rows or columns, with flexible container dimensions.",
      "type": "technique",
      "difficulty": "medium",
      "category": "CSS Concepts",
      "example": "Flexbox makes it simple to align items and distribute space within a container.",
      "interviewImportance": "high"
    },
    {
      "id": "gxyxz5yrvv",
      "frequency": 9,
      "description": "A predictable state container for JavaScript apps, often used with React for managing application state.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Redux",
      "definition": "A predictable state container for JavaScript apps, often used with React for managing application state.",
      "type": "library",
      "difficulty": "hard",
      "category": "Frontend Frameworks",
      "example": "Redux maintains the state of an entire application in a single immutable state tree.",
      "interviewImportance": "high"
    },
    {
      "id": "51n1rnqzm9",
      "frequency": 35,
      "description": "A strongly typed programming language that builds on JavaScript, adding static type definitions.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "TypeScript",
      "definition": "A strongly typed programming language that builds on JavaScript, adding static type definitions.",
      "type": "technology",
      "difficulty": "medium",
      "category": "TypeScript",
      "example": "TypeScript helps catch errors during development through type checking and code completion.",
      "interviewImportance": "high"
    },
    {
      "id": "x6bch9wjf7",
      "frequency": 90,
      "description": "A static module bundler for modern JavaScript applications that processes applications with a dependency graph.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Webpack",
      "definition": "A static module bundler for modern JavaScript applications that processes applications with a dependency graph.",
      "type": "tool",
      "difficulty": "hard",
      "category": "Development Process",
      "example": "Webpack can handle not only JavaScript but also assets like HTML, CSS, and images with appropriate loaders.",
      "interviewImportance": "medium"
    },
    {
      "id": "mvbslvel6g",
      "frequency": 55,
      "description": "An architectural style for designing networked applications using HTTP requests to access and manipulate data.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "REST API",
      "definition": "An architectural style for designing networked applications using HTTP requests to access and manipulate data.",
      "type": "API",
      "difficulty": "medium",
      "category": "Web Development",
      "example": "RESTful APIs use HTTP methods like GET, POST, PUT, and DELETE to perform CRUD operations.",
      "interviewImportance": "high"
    },
    {
      "id": "oz3uz2qrdf",
      "frequency": 91,
      "description": "A query language for APIs and a runtime for executing those queries with existing data.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "GraphQL",
      "definition": "A query language for APIs and a runtime for executing those queries with existing data.",
      "type": "API",
      "difficulty": "hard",
      "category": "Web Development",
      "example": "GraphQL allows clients to request exactly what they need, making API responses more efficient.",
      "interviewImportance": "medium"
    },
    {
      "id": "evoguuxz8g",
      "frequency": 27,
      "description": "Web applications that use modern web capabilities to deliver app-like experiences to users.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Progressive Web App",
      "definition": "Web applications that use modern web capabilities to deliver app-like experiences to users.",
      "type": "concept",
      "difficulty": "medium",
      "category": "Web Development",
      "example": "PWAs can work offline, send push notifications, and can be installed on home screens.",
      "interviewImportance": "medium"
    },
    {
      "id": "atd27uytaz",
      "frequency": 40,
      "description": "A set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Web Components",
      "definition": "A set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags.",
      "type": "technology",
      "difficulty": "medium",
      "category": "Web Development",
      "example": "Web Components consist of Custom Elements, Shadow DOM, and HTML Templates.",
      "interviewImportance": "low"
    },
    {
      "id": "3g5843uenw",
      "frequency": 20,
      "description": "The technique of splitting your code into various bundles which can then be loaded on demand.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Code Splitting",
      "definition": "The technique of splitting your code into various bundles which can then be loaded on demand.",
      "type": "technique",
      "difficulty": "medium",
      "category": "Performance",
      "example": "Code splitting prevents loading unnecessary code and reduces initial load time.",
      "interviewImportance": "medium"
    },
    {
      "id": "d26xdx276t",
      "frequency": 18,
      "description": "Browser API that provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Intersection Observer",
      "definition": "Browser API that provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element.",
      "type": "API",
      "difficulty": "medium",
      "category": "Browser APIs",
      "example": "Intersection Observer is commonly used for lazy loading images and implementing infinite scroll.",
      "interviewImportance": "low"
    },
    {
      "id": "tx3cy4exn6",
      "frequency": 67,
      "description": "An architectural style where independently deliverable frontend applications are composed into a greater whole.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Micro-Frontends",
      "definition": "An architectural style where independently deliverable frontend applications are composed into a greater whole.",
      "type": "pattern",
      "difficulty": "hard",
      "category": "Software Architecture",
      "example": "Micro-frontends allow teams to work independently on different parts of a frontend application.",
      "interviewImportance": "medium"
    },
    {
      "id": "efdvmcmru3",
      "frequency": 99,
      "description": "A styling technique where JavaScript is used to style components, eliminating the need for CSS stylesheets.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "CSS-in-JS",
      "definition": "A styling technique where JavaScript is used to style components, eliminating the need for CSS stylesheets.",
      "type": "technique",
      "difficulty": "medium",
      "category": "CSS Concepts",
      "example": "Libraries like styled-components and Emotion allow developers to write CSS directly within JavaScript files.",
      "interviewImportance": "medium"
    },
    {
      "id": "wteylh8bpd",
      "frequency": 33,
      "description": "The practice of making websites usable by as many people as possible, including those with disabilities.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Web Accessibility",
      "definition": "The practice of making websites usable by as many people as possible, including those with disabilities.",
      "type": "best practice",
      "difficulty": "medium",
      "category": "Web Development",
      "example": "WCAG guidelines provide standards for creating accessible web content for users with diverse abilities.",
      "interviewImportance": "high"
    },
    {
      "id": "tr1rv98otm",
      "frequency": 43,
      "description": "The process of rendering web pages on the server before sending them to the browser.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Server-Side Rendering",
      "definition": "The process of rendering web pages on the server before sending them to the browser.",
      "type": "technique",
      "difficulty": "hard",
      "category": "Performance",
      "example": "Next.js is a popular framework that provides server-side rendering capabilities for React applications.",
      "interviewImportance": "medium"
    },
    {
      "id": "pytlgk6cr0",
      "frequency": 78,
      "description": "A communication protocol that provides full-duplex communication channels over a single TCP connection.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "Web Sockets",
      "definition": "A communication protocol that provides full-duplex communication channels over a single TCP connection.",
      "type": "protocol",
      "difficulty": "medium",
      "category": "Web Development",
      "example": "Web Sockets are commonly used for real-time applications like chat and live notifications.",
      "interviewImportance": "medium"
    },
    {
      "id": "6hblime8ph",
      "frequency": 46,
      "description": "A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": [],
      "createdAt": 1747749383708,
      "term": "JAMstack",
      "definition": "A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup.",
      "type": "concept",
      "difficulty": "medium",
      "category": "Software Architecture",
      "example": "JAMstack websites deliver better performance, higher security, and lower cost of scaling.",
      "interviewImportance": "low"
    },
    {
      "id": "e17uq00hju",
      "type": "component",
      "difficulty": "hard",
      "frequency": 38,
      "interviewImportance": "medium",
      "description": "An interactive element that allows users to trigger an action when clicked.",
      "relatedTerms": [],
      "codeExample": "<Button onClick={handleSubmit}>Submit</Button>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Button",
      "definition": "An interactive element that allows users to trigger an action when clicked.",
      "category": "UI Components",
      "example": "<Button onClick={handleSubmit}>Submit</Button>"
    },
    {
      "id": "oburb4z1iw",
      "type": "component",
      "difficulty": "easy",
      "frequency": 0,
      "interviewImportance": "medium",
      "description": "An input component that allows users to enter and edit text.",
      "relatedTerms": [],
      "codeExample": "<TextField value={name} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "TextField",
      "definition": "An input component that allows users to enter and edit text.",
      "category": "UI Components",
      "example": "<TextField value={name} onChange={handleChange} />"
    },
    {
      "id": "he9r0lujnv",
      "type": "component",
      "difficulty": "easy",
      "frequency": 96,
      "interviewImportance": "medium",
      "description": "A control component that allows users to select multiple options from a set.",
      "relatedTerms": [],
      "codeExample": "<Checkbox checked={isChecked} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Checkbox",
      "definition": "A control component that allows users to select multiple options from a set.",
      "category": "UI Components",
      "example": "<Checkbox checked={isChecked} onChange={handleChange} />"
    },
    {
      "id": "km5vb5b57j",
      "type": "component",
      "difficulty": "medium",
      "frequency": 4,
      "interviewImportance": "low",
      "description": "A control component that allows users to select one option from a set.",
      "relatedTerms": [],
      "codeExample": "<RadioButton selected={option === 'first'} value='first' />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "RadioButton",
      "definition": "A control component that allows users to select one option from a set.",
      "category": "UI Components",
      "example": "<RadioButton selected={option === 'first'} value='first' />"
    },
    {
      "id": "zr05d920pc",
      "type": "component",
      "difficulty": "medium",
      "frequency": 88,
      "interviewImportance": "medium",
      "description": "A control component that allows users to select an option from a dropdown list.",
      "relatedTerms": [],
      "codeExample": "<Select value={country} onChange={handleCountryChange}></Select>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Select",
      "definition": "A control component that allows users to select an option from a dropdown list.",
      "category": "UI Components",
      "example": "<Select value={country} onChange={handleCountryChange}></Select>"
    },
    {
      "id": "ca7f3q0ft2",
      "type": "component",
      "difficulty": "easy",
      "frequency": 65,
      "interviewImportance": "high",
      "description": "An input component that allows users to select a value from a range by dragging a thumb.",
      "relatedTerms": [],
      "codeExample": "<Slider min={0} max={100} value={50} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Slider",
      "definition": "An input component that allows users to select a value from a range by dragging a thumb.",
      "category": "UI Components",
      "example": "<Slider min={0} max={100} value={50} />"
    },
    {
      "id": "8s3opr3udy",
      "type": "component",
      "difficulty": "medium",
      "frequency": 35,
      "interviewImportance": "low",
      "description": "A control component that allows users to toggle between two states.",
      "relatedTerms": [],
      "codeExample": "<Switch checked={isEnabled} onChange={toggleFeature} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Switch",
      "definition": "A control component that allows users to toggle between two states.",
      "category": "UI Components",
      "example": "<Switch checked={isEnabled} onChange={toggleFeature} />"
    },
    {
      "id": "aka32edvti",
      "type": "component",
      "difficulty": "hard",
      "frequency": 61,
      "interviewImportance": "high",
      "description": "A component that allows users to select a date from a calendar interface.",
      "relatedTerms": [],
      "codeExample": "<DatePicker selected={startDate} onChange={date => setStartDate(date)} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "DatePicker",
      "definition": "A component that allows users to select a date from a calendar interface.",
      "category": "UI Components",
      "example": "<DatePicker selected={startDate} onChange={date => setStartDate(date)} />"
    },
    {
      "id": "vedf054qu",
      "type": "component",
      "difficulty": "hard",
      "frequency": 60,
      "interviewImportance": "medium",
      "description": "A component that allows users to select and upload files.",
      "relatedTerms": [],
      "codeExample": "<FileUpload accept='image/*' onUpload={handleUpload} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "FileUpload",
      "definition": "A component that allows users to select and upload files.",
      "category": "UI Components",
      "example": "<FileUpload accept='image/*' onUpload={handleUpload} />"
    },
    {
      "id": "lc9rvo1m8g",
      "type": "component",
      "difficulty": "easy",
      "frequency": 10,
      "interviewImportance": "medium",
      "description": "A container component that groups form controls together.",
      "relatedTerms": [],
      "codeExample": "<FormGroup><Label>Name</Label><Input /></FormGroup>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "FormGroup",
      "definition": "A container component that groups form controls together.",
      "category": "UI Components",
      "example": "<FormGroup><Label>Name</Label><Input /></FormGroup>"
    },
    {
      "id": "nq12f417sk",
      "type": "component",
      "difficulty": "hard",
      "frequency": 93,
      "interviewImportance": "high",
      "description": "A navigation component typically displayed at the top of a page.",
      "relatedTerms": [],
      "codeExample": "<Navbar><NavItem>Home</NavItem><NavItem>About</NavItem></Navbar>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Navbar",
      "definition": "A navigation component typically displayed at the top of a page.",
      "category": "Navigation Components",
      "example": "<Navbar><NavItem>Home</NavItem><NavItem>About</NavItem></Navbar>"
    },
    {
      "id": "tehkf0qckh",
      "type": "component",
      "difficulty": "easy",
      "frequency": 78,
      "interviewImportance": "high",
      "description": "A panel that slides in from the edge of the screen, often used for navigation on mobile.",
      "relatedTerms": [],
      "codeExample": "<Drawer open={isOpen} onClose={handleClose}></Drawer>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Drawer",
      "definition": "A panel that slides in from the edge of the screen, often used for navigation on mobile.",
      "category": "Navigation Components",
      "example": "<Drawer open={isOpen} onClose={handleClose}></Drawer>"
    },
    {
      "id": "0y9cu3ijvv",
      "type": "component",
      "difficulty": "hard",
      "frequency": 90,
      "interviewImportance": "high",
      "description": "A component that organizes content into separate views that can be accessed by selecting tabs.",
      "relatedTerms": [],
      "codeExample": "<Tabs value={tab} onChange={handleChange}><Tab label='Overview' /><Tab label='Details' /></Tabs>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Tabs",
      "definition": "A component that organizes content into separate views that can be accessed by selecting tabs.",
      "category": "Navigation Components",
      "example": "<Tabs value={tab} onChange={handleChange}><Tab label='Overview' /><Tab label='Details' /></Tabs>"
    },
    {
      "id": "m820dyezbw",
      "type": "component",
      "difficulty": "hard",
      "frequency": 62,
      "interviewImportance": "medium",
      "description": "A navigation component that shows the user's location in a website hierarchy.",
      "relatedTerms": [],
      "codeExample": "<Breadcrumbs><Link to='/'>Home</Link><Link to='/products'>Products</Link></Breadcrumbs>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Breadcrumbs",
      "definition": "A navigation component that shows the user's location in a website hierarchy.",
      "category": "Navigation Components",
      "example": "<Breadcrumbs><Link to='/'>Home</Link><Link to='/products'>Products</Link></Breadcrumbs>"
    },
    {
      "id": "c3uzh4f8xg",
      "type": "component",
      "difficulty": "easy",
      "frequency": 69,
      "interviewImportance": "medium",
      "description": "A component that allows users to navigate through multiple pages of content.",
      "relatedTerms": [],
      "codeExample": "<Pagination count={10} page={page} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Pagination",
      "definition": "A component that allows users to navigate through multiple pages of content.",
      "category": "Navigation Components",
      "example": "<Pagination count={10} page={page} onChange={handleChange} />"
    },
    {
      "id": "eax3syix7x",
      "type": "component",
      "difficulty": "medium",
      "frequency": 13,
      "interviewImportance": "high",
      "description": "A component that displays a list of options when triggered.",
      "relatedTerms": [],
      "codeExample": "<Menu open={isOpen} onClose={handleClose}><MenuItem>Profile</MenuItem></Menu>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Menu",
      "definition": "A component that displays a list of options when triggered.",
      "category": "Navigation Components",
      "example": "<Menu open={isOpen} onClose={handleClose}><MenuItem>Profile</MenuItem></Menu>"
    },
    {
      "id": "7q972eydf9",
      "type": "component",
      "difficulty": "easy",
      "frequency": 64,
      "interviewImportance": "medium",
      "description": "A component that displays progress through a sequence of steps.",
      "relatedTerms": [],
      "codeExample": "<Stepper activeStep={1}><Step label='Cart' /><Step label='Delivery' /></Stepper>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Stepper",
      "definition": "A component that displays progress through a sequence of steps.",
      "category": "Navigation Components",
      "example": "<Stepper activeStep={1}><Step label='Cart' /><Step label='Delivery' /></Stepper>"
    },
    {
      "id": "s9fgtd20o5",
      "type": "component",
      "difficulty": "medium",
      "frequency": 38,
      "interviewImportance": "medium",
      "description": "A container component that groups related content and actions.",
      "relatedTerms": [],
      "codeExample": "<Card><CardHeader title='Title' /><CardContent>Content here</CardContent></Card>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Card",
      "definition": "A container component that groups related content and actions.",
      "category": "Layout Components",
      "example": "<Card><CardHeader title='Title' /><CardContent>Content here</CardContent></Card>"
    },
    {
      "id": "0wzs5wj2tv",
      "type": "component",
      "difficulty": "hard",
      "frequency": 24,
      "interviewImportance": "medium",
      "description": "A layout component that arranges items in rows and columns.",
      "relatedTerms": [],
      "codeExample": "<Grid container><Grid item xs={6}>Left</Grid><Grid item xs={6}>Right</Grid></Grid>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Grid",
      "definition": "A layout component that arranges items in rows and columns.",
      "category": "Layout Components",
      "example": "<Grid container><Grid item xs={6}>Left</Grid><Grid item xs={6}>Right</Grid></Grid>"
    },
    {
      "id": "d8nwnqajxg",
      "type": "component",
      "difficulty": "medium",
      "frequency": 49,
      "interviewImportance": "high",
      "description": "A layout component that centers content horizontally and applies consistent margins.",
      "relatedTerms": [],
      "codeExample": "<Container maxWidth='md'>Content here</Container>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Container",
      "definition": "A layout component that centers content horizontally and applies consistent margins.",
      "category": "Layout Components",
      "example": "<Container maxWidth='md'>Content here</Container>"
    },
    {
      "id": "1wrq8dx3ie",
      "type": "component",
      "difficulty": "hard",
      "frequency": 28,
      "interviewImportance": "high",
      "description": "A component that creates a line separator between content.",
      "relatedTerms": [],
      "codeExample": "<div>Section 1</div><Divider /><div>Section 2</div>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Divider",
      "definition": "A component that creates a line separator between content.",
      "category": "Layout Components",
      "example": "<div>Section 1</div><Divider /><div>Section 2</div>"
    },
    {
      "id": "2fu54vrfgb",
      "type": "component",
      "difficulty": "medium",
      "frequency": 69,
      "interviewImportance": "low",
      "description": "A surface component that resembles a sheet of paper with shadow effects.",
      "relatedTerms": [],
      "codeExample": "<Paper elevation={3}>Content with shadow effect</Paper>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Paper",
      "definition": "A surface component that resembles a sheet of paper with shadow effects.",
      "category": "Layout Components",
      "example": "<Paper elevation={3}>Content with shadow effect</Paper>"
    },
    {
      "id": "yjdzfhbj3x",
      "type": "component",
      "difficulty": "medium",
      "frequency": 75,
      "interviewImportance": "low",
      "description": "A basic layout component with style utility functions.",
      "relatedTerms": [],
      "codeExample": "<Box m={2} p={1} bgcolor='background.paper'>Styled box</Box>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Box",
      "definition": "A basic layout component with style utility functions.",
      "category": "Layout Components",
      "example": "<Box m={2} p={1} bgcolor='background.paper'>Styled box</Box>"
    },
    {
      "id": "lvl7i534u3",
      "type": "component",
      "difficulty": "hard",
      "frequency": 7,
      "interviewImportance": "medium",
      "description": "A component that animates the height of its children when showing or hiding them.",
      "relatedTerms": [],
      "codeExample": "<Collapse in={expanded}><div>Expanded content</div></Collapse>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Collapse",
      "definition": "A component that animates the height of its children when showing or hiding them.",
      "category": "Layout Components",
      "example": "<Collapse in={expanded}><div>Expanded content</div></Collapse>"
    },
    {
      "id": "lkhbmmhpcr",
      "type": "component",
      "difficulty": "hard",
      "frequency": 12,
      "interviewImportance": "high",
      "description": "A component that displays a series of items in a vertical column.",
      "relatedTerms": [],
      "codeExample": "<List><ListItem>Item 1</ListItem><ListItem>Item 2</ListItem></List>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "List",
      "definition": "A component that displays a series of items in a vertical column.",
      "category": "Layout Components",
      "example": "<List><ListItem>Item 1</ListItem><ListItem>Item 2</ListItem></List>"
    },
    {
      "id": "l51qow4aiy",
      "type": "component",
      "difficulty": "medium",
      "frequency": 12,
      "interviewImportance": "high",
      "description": "A component that displays data in rows and columns.",
      "relatedTerms": [],
      "codeExample": "<Table><TableHead><TableRow><TableCell>Name</TableCell></TableRow></TableHead></Table>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Table",
      "definition": "A component that displays data in rows and columns.",
      "category": "Layout Components",
      "example": "<Table><TableHead><TableRow><TableCell>Name</TableCell></TableRow></TableHead></Table>"
    },
    {
      "id": "vgie1c9h8s",
      "type": "component",
      "difficulty": "hard",
      "frequency": 37,
      "interviewImportance": "high",
      "description": "A component that displays a short, important message to get the user's attention.",
      "relatedTerms": [],
      "codeExample": "<Alert severity='success'>Operation successful!</Alert>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Alert",
      "definition": "A component that displays a short, important message to get the user's attention.",
      "category": "Feedback Components",
      "example": "<Alert severity='success'>Operation successful!</Alert>"
    },
    {
      "id": "nvfmv5lil2",
      "type": "component",
      "difficulty": "hard",
      "frequency": 27,
      "interviewImportance": "low",
      "description": "A component that displays brief notifications at the bottom of the screen.",
      "relatedTerms": [],
      "codeExample": "<Snackbar open={open} message='Changes saved' />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Snackbar",
      "definition": "A component that displays brief notifications at the bottom of the screen.",
      "category": "Feedback Components",
      "example": "<Snackbar open={open} message='Changes saved' />"
    },
    {
      "id": "hg9qttqgjn",
      "type": "component",
      "difficulty": "hard",
      "frequency": 23,
      "interviewImportance": "low",
      "description": "A modal window that appears in front of the app content to provide critical information or request input.",
      "relatedTerms": [],
      "codeExample": "<Dialog open={open} onClose={handleClose}><DialogTitle>Confirm</DialogTitle></Dialog>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Dialog",
      "definition": "A modal window that appears in front of the app content to provide critical information or request input.",
      "category": "Feedback Components",
      "example": "<Dialog open={open} onClose={handleClose}><DialogTitle>Confirm</DialogTitle></Dialog>"
    },
    {
      "id": "b81menjq5t",
      "type": "component",
      "difficulty": "medium",
      "frequency": 95,
      "interviewImportance": "high",
      "description": "A component that indicates the progress of an operation.",
      "relatedTerms": [],
      "codeExample": "<ProgressBar value={75} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "ProgressBar",
      "definition": "A component that indicates the progress of an operation.",
      "category": "Feedback Components",
      "example": "<ProgressBar value={75} />"
    },
    {
      "id": "263pkla068",
      "type": "component",
      "difficulty": "easy",
      "frequency": 37,
      "interviewImportance": "medium",
      "description": "A placeholder component that simulates the layout of content before it loads.",
      "relatedTerms": [],
      "codeExample": "<Skeleton variant='text' width={200} height={40} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Skeleton",
      "definition": "A placeholder component that simulates the layout of content before it loads.",
      "category": "Feedback Components",
      "example": "<Skeleton variant='text' width={200} height={40} />"
    },
    {
      "id": "4mvaan8oe4",
      "type": "component",
      "difficulty": "medium",
      "frequency": 26,
      "interviewImportance": "high",
      "description": "A component that displays informative text when users hover over, focus on, or tap an element.",
      "relatedTerms": [],
      "codeExample": "<Tooltip title='Delete'><Button>X</Button></Tooltip>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Tooltip",
      "definition": "A component that displays informative text when users hover over, focus on, or tap an element.",
      "category": "Feedback Components",
      "example": "<Tooltip title='Delete'><Button>X</Button></Tooltip>"
    },
    {
      "id": "z00evyq2m9",
      "type": "component",
      "difficulty": "hard",
      "frequency": 20,
      "interviewImportance": "high",
      "description": "A small status descriptor for UI elements that typically appears as a colored dot or count.",
      "relatedTerms": [],
      "codeExample": "<Badge badgeContent={4} color='primary'><MailIcon /></Badge>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Badge",
      "definition": "A small status descriptor for UI elements that typically appears as a colored dot or count.",
      "category": "Feedback Components",
      "example": "<Badge badgeContent={4} color='primary'><MailIcon /></Badge>"
    },
    {
      "id": "1l9631r96z",
      "type": "component",
      "difficulty": "hard",
      "frequency": 54,
      "interviewImportance": "medium",
      "description": "A non-modal alert that appears temporarily and disappears automatically.",
      "relatedTerms": [],
      "codeExample": "<Toast show={show} onClose={handleClose}>Success!</Toast>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Toast",
      "definition": "A non-modal alert that appears temporarily and disappears automatically.",
      "category": "Feedback Components",
      "example": "<Toast show={show} onClose={handleClose}>Success!</Toast>"
    },
    {
      "id": "z0uk1sm0nx",
      "type": "component",
      "difficulty": "easy",
      "frequency": 56,
      "interviewImportance": "low",
      "description": "A text input component with suggestions as the user types.",
      "relatedTerms": [],
      "codeExample": "<Autocomplete options={countries} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Autocomplete",
      "definition": "A text input component with suggestions as the user types.",
      "category": "UI Components",
      "example": "<Autocomplete options={countries} onChange={handleChange} />"
    },
    {
      "id": "wgg5lemug2",
      "type": "component",
      "difficulty": "medium",
      "frequency": 14,
      "interviewImportance": "high",
      "description": "A select component that allows users to select multiple options.",
      "relatedTerms": [],
      "codeExample": "<MultiSelect options={options} selected={selected} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "MultiSelect",
      "definition": "A select component that allows users to select multiple options.",
      "category": "UI Components",
      "example": "<MultiSelect options={options} selected={selected} onChange={handleChange} />"
    },
    {
      "id": "09il3uzebw",
      "type": "component",
      "difficulty": "hard",
      "frequency": 2,
      "interviewImportance": "low",
      "description": "An input component that allows users to enter multiple tags or keywords.",
      "relatedTerms": [],
      "codeExample": "<TagInput tags={tags} onAdd={addTag} onRemove={removeTag} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "TagInput",
      "definition": "An input component that allows users to enter multiple tags or keywords.",
      "category": "UI Components",
      "example": "<TagInput tags={tags} onAdd={addTag} onRemove={removeTag} />"
    },
    {
      "id": "tcuqjrhfif",
      "type": "component",
      "difficulty": "medium",
      "frequency": 79,
      "interviewImportance": "high",
      "description": "A component that allows users to select a color from a palette.",
      "relatedTerms": [],
      "codeExample": "<ColorPicker color={color} onChange={handleColorChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "ColorPicker",
      "definition": "A component that allows users to select a color from a palette.",
      "category": "UI Components",
      "example": "<ColorPicker color={color} onChange={handleColorChange} />"
    },
    {
      "id": "fajw0og7qv",
      "type": "component",
      "difficulty": "medium",
      "frequency": 51,
      "interviewImportance": "medium",
      "description": "A component that provides text formatting capabilities for content creation.",
      "relatedTerms": [],
      "codeExample": "<RichTextEditor value={content} onChange={setContent} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "RichTextEditor",
      "definition": "A component that provides text formatting capabilities for content creation.",
      "category": "UI Components",
      "example": "<RichTextEditor value={content} onChange={setContent} />"
    },
    {
      "id": "ii17r7k5ve",
      "type": "component",
      "difficulty": "medium",
      "frequency": 13,
      "interviewImportance": "medium",
      "description": "A text field component designed for password input with show/hide functionality.",
      "relatedTerms": [],
      "codeExample": "<PasswordField value={password} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "PasswordField",
      "definition": "A text field component designed for password input with show/hide functionality.",
      "category": "UI Components",
      "example": "<PasswordField value={password} onChange={handleChange} />"
    },
    {
      "id": "jb66urdnu3",
      "type": "component",
      "difficulty": "hard",
      "frequency": 46,
      "interviewImportance": "medium",
      "description": "An input component optimized for search functionality.",
      "relatedTerms": [],
      "codeExample": "<SearchBar value={query} onSearch={handleSearch} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "SearchBar",
      "definition": "An input component optimized for search functionality.",
      "category": "UI Components",
      "example": "<SearchBar value={query} onSearch={handleSearch} />"
    },
    {
      "id": "2s3wodt6vg",
      "type": "component",
      "difficulty": "hard",
      "frequency": 44,
      "interviewImportance": "low",
      "description": "A specialized input for numerical values with increment/decrement controls.",
      "relatedTerms": [],
      "codeExample": "<NumberInput value={quantity} min={1} max={10} onChange={handleChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "NumberInput",
      "definition": "A specialized input for numerical values with increment/decrement controls.",
      "category": "UI Components",
      "example": "<NumberInput value={quantity} min={1} max={10} onChange={handleChange} />"
    },
    {
      "id": "ebexh5nu75",
      "type": "component",
      "difficulty": "medium",
      "frequency": 62,
      "interviewImportance": "medium",
      "description": "A specialized input for entering one-time passwords or verification codes.",
      "relatedTerms": [],
      "codeExample": "<OTPInput length={6} onChange={handleOtpChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "OTPInput",
      "definition": "A specialized input for entering one-time passwords or verification codes.",
      "category": "UI Components",
      "example": "<OTPInput length={6} onChange={handleOtpChange} />"
    },
    {
      "id": "au4mcjqamh",
      "type": "component",
      "difficulty": "easy",
      "frequency": 70,
      "interviewImportance": "medium",
      "description": "A component that displays a rating using stars or other symbols and allows user input.",
      "relatedTerms": [],
      "codeExample": "<Rating value={4.5} max={5} onChange={handleRatingChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Rating",
      "definition": "A component that displays a rating using stars or other symbols and allows user input.",
      "category": "UI Components",
      "example": "<Rating value={4.5} max={5} onChange={handleRatingChange} />"
    },
    {
      "id": "fbyuwa5fjg",
      "type": "component",
      "difficulty": "hard",
      "frequency": 98,
      "interviewImportance": "medium",
      "description": "A component that allows users to select a time.",
      "relatedTerms": [],
      "codeExample": "<TimePicker value={time} onChange={handleTimeChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "TimePicker",
      "definition": "A component that allows users to select a time.",
      "category": "UI Components",
      "example": "<TimePicker value={time} onChange={handleTimeChange} />"
    },
    {
      "id": "no8jkungx8",
      "type": "component",
      "difficulty": "medium",
      "frequency": 28,
      "interviewImportance": "medium",
      "description": "A component that allows users to select a start and end date.",
      "relatedTerms": [],
      "codeExample": "<DateRangePicker startDate={start} endDate={end} onChange={handleDateChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "DateRangePicker",
      "definition": "A component that allows users to select a start and end date.",
      "category": "UI Components",
      "example": "<DateRangePicker startDate={start} endDate={end} onChange={handleDateChange} />"
    },
    {
      "id": "h1v607624w",
      "type": "component",
      "difficulty": "easy",
      "frequency": 79,
      "interviewImportance": "high",
      "description": "A navigation component typically displayed at the bottom of mobile interfaces.",
      "relatedTerms": [],
      "codeExample": "<BottomNavigation value={value} onChange={handleChange}><BottomNavigationAction label='Home' /></BottomNavigation>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "BottomNavigation",
      "definition": "A navigation component typically displayed at the bottom of mobile interfaces.",
      "category": "Navigation Components",
      "example": "<BottomNavigation value={value} onChange={handleChange}><BottomNavigationAction label='Home' /></BottomNavigation>"
    },
    {
      "id": "53x6h3e8zs",
      "type": "component",
      "difficulty": "medium",
      "frequency": 27,
      "interviewImportance": "medium",
      "description": "A vertical navigation component typically displayed on the side of the page.",
      "relatedTerms": [],
      "codeExample": "<SideNav items={navItems} activeItem={currentPage} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "SideNav",
      "definition": "A vertical navigation component typically displayed on the side of the page.",
      "category": "Navigation Components",
      "example": "<SideNav items={navItems} activeItem={currentPage} />"
    },
    {
      "id": "m3a4ua4vbj",
      "type": "component",
      "difficulty": "easy",
      "frequency": 88,
      "interviewImportance": "low",
      "description": "A link component specifically designed for navigation with active state.",
      "relatedTerms": [],
      "codeExample": "<NavLink to='/home' activeClassName='active'>Home</NavLink>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "NavLink",
      "definition": "A link component specifically designed for navigation with active state.",
      "category": "Navigation Components",
      "example": "<NavLink to='/home' activeClassName='active'>Home</NavLink>"
    },
    {
      "id": "gkioidhpqy",
      "type": "component",
      "difficulty": "easy",
      "frequency": 33,
      "interviewImportance": "medium",
      "description": "A clickable element that reveals a list of options or content.",
      "relatedTerms": [],
      "codeExample": "<Dropdown toggle={toggleDropdown} isOpen={isOpen}><DropdownItem>Option</DropdownItem></Dropdown>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Dropdown",
      "definition": "A clickable element that reveals a list of options or content.",
      "category": "Navigation Components",
      "example": "<Dropdown toggle={toggleDropdown} isOpen={isOpen}><DropdownItem>Option</DropdownItem></Dropdown>"
    },
    {
      "id": "zedhd5hcfi",
      "type": "component",
      "difficulty": "medium",
      "frequency": 83,
      "interviewImportance": "high",
      "description": "A component that displays hierarchical data in a tree-like structure.",
      "relatedTerms": [],
      "codeExample": "<TreeView><TreeItem nodeId='1' label='Parent'><TreeItem nodeId='2' label='Child' /></TreeItem></TreeView>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "TreeView",
      "definition": "A component that displays hierarchical data in a tree-like structure.",
      "category": "Navigation Components",
      "example": "<TreeView><TreeItem nodeId='1' label='Parent'><TreeItem nodeId='2' label='Child' /></TreeItem></TreeView>"
    },
    {
      "id": "yxpilhral7",
      "type": "component",
      "difficulty": "medium",
      "frequency": 32,
      "interviewImportance": "medium",
      "description": "A component with expandable panels that can be toggled to reveal content.",
      "relatedTerms": [],
      "codeExample": "<Accordion><AccordionSummary>Title</AccordionSummary><AccordionDetails>Content</AccordionDetails></Accordion>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Accordion",
      "definition": "A component with expandable panels that can be toggled to reveal content.",
      "category": "Navigation Components",
      "example": "<Accordion><AccordionSummary>Title</AccordionSummary><AccordionDetails>Content</AccordionDetails></Accordion>"
    },
    {
      "id": "8pch5qfcmd",
      "type": "component",
      "difficulty": "easy",
      "frequency": 61,
      "interviewImportance": "high",
      "description": "A layout component that uses CSS flexbox for flexible layouts.",
      "relatedTerms": [],
      "codeExample": "<Flex direction='row' justify='space-between'><Box>1</Box><Box>2</Box></Flex>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Flex",
      "definition": "A layout component that uses CSS flexbox for flexible layouts.",
      "category": "Layout Components",
      "example": "<Flex direction='row' justify='space-between'><Box>1</Box><Box>2</Box></Flex>"
    },
    {
      "id": "sxdmwxfd2n",
      "type": "component",
      "difficulty": "medium",
      "frequency": 0,
      "interviewImportance": "medium",
      "description": "A layout component that creates a grid of items with varying heights.",
      "relatedTerms": [],
      "codeExample": "<Masonry columns={3}>{items.map(item => <Item key={item.id} />)}</Masonry>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Masonry",
      "definition": "A layout component that creates a grid of items with varying heights.",
      "category": "Layout Components",
      "example": "<Masonry columns={3}>{items.map(item => <Item key={item.id} />)}</Masonry>"
    },
    {
      "id": "0cwc26uiua",
      "type": "component",
      "difficulty": "hard",
      "frequency": 67,
      "interviewImportance": "high",
      "description": "A layout component that maintains a specific aspect ratio for its content.",
      "relatedTerms": [],
      "codeExample": "<AspectRatio ratio={16/9}><img src='image.jpg' /></AspectRatio>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "AspectRatio",
      "definition": "A layout component that maintains a specific aspect ratio for its content.",
      "category": "Layout Components",
      "example": "<AspectRatio ratio={16/9}><img src='image.jpg' /></AspectRatio>"
    },
    {
      "id": "oq0dwartad",
      "type": "component",
      "difficulty": "medium",
      "frequency": 95,
      "interviewImportance": "high",
      "description": "A utility component that creates empty space between elements.",
      "relatedTerms": [],
      "codeExample": "<Box>Content</Box><Spacer size={2} /><Box>More content</Box>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Spacer",
      "definition": "A utility component that creates empty space between elements.",
      "category": "Layout Components",
      "example": "<Box>Content</Box><Spacer size={2} /><Box>More content</Box>"
    },
    {
      "id": "85kpmalaw3",
      "type": "component",
      "difficulty": "hard",
      "frequency": 98,
      "interviewImportance": "high",
      "description": "A component that renders children into a DOM node outside the parent hierarchy.",
      "relatedTerms": [],
      "codeExample": "<Portal container={document.body}><Modal /></Portal>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Portal",
      "definition": "A component that renders children into a DOM node outside the parent hierarchy.",
      "category": "Layout Components",
      "example": "<Portal container={document.body}><Modal /></Portal>"
    },
    {
      "id": "aro8557q7w",
      "type": "component",
      "difficulty": "hard",
      "frequency": 65,
      "interviewImportance": "medium",
      "description": "A component that stays fixed at a specific position as the user scrolls.",
      "relatedTerms": [],
      "codeExample": "<Sticky top={0}><Navbar /></Sticky>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Sticky",
      "definition": "A component that stays fixed at a specific position as the user scrolls.",
      "category": "Layout Components",
      "example": "<Sticky top={0}><Navbar /></Sticky>"
    },
    {
      "id": "9119j651oc",
      "type": "component",
      "difficulty": "medium",
      "frequency": 45,
      "interviewImportance": "low",
      "description": "A component that displays a series of events in chronological order.",
      "relatedTerms": [],
      "codeExample": "<Timeline><TimelineItem>Event 1</TimelineItem><TimelineItem>Event 2</TimelineItem></Timeline>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Timeline",
      "definition": "A component that displays a series of events in chronological order.",
      "category": "Layout Components",
      "example": "<Timeline><TimelineItem>Event 1</TimelineItem><TimelineItem>Event 2</TimelineItem></Timeline>"
    },
    {
      "id": "l5t457p03j",
      "type": "component",
      "difficulty": "medium",
      "frequency": 98,
      "interviewImportance": "high",
      "description": "A loading indicator component that shows an animation while content loads.",
      "relatedTerms": [],
      "codeExample": "<Spinner size='medium' color='primary' />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Spinner",
      "definition": "A loading indicator component that shows an animation while content loads.",
      "category": "Feedback Components",
      "example": "<Spinner size='medium' color='primary' />"
    },
    {
      "id": "t1ufy4mk5s",
      "type": "component",
      "difficulty": "medium",
      "frequency": 59,
      "interviewImportance": "high",
      "description": "A component that covers the entire screen to focus attention on a foreground element.",
      "relatedTerms": [],
      "codeExample": "<Backdrop open={loading}><CircularProgress /></Backdrop>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Backdrop",
      "definition": "A component that covers the entire screen to focus attention on a foreground element.",
      "category": "Feedback Components",
      "example": "<Backdrop open={loading}><CircularProgress /></Backdrop>"
    },
    {
      "id": "hkzpwlobnh",
      "type": "component",
      "difficulty": "medium",
      "frequency": 96,
      "interviewImportance": "low",
      "description": "A dialog box/popup window that appears on top of the current page.",
      "relatedTerms": [],
      "codeExample": "<Modal open={isOpen} onClose={handleClose}><div>Modal content</div></Modal>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Modal",
      "definition": "A dialog box/popup window that appears on top of the current page.",
      "category": "Feedback Components",
      "example": "<Modal open={isOpen} onClose={handleClose}><div>Modal content</div></Modal>"
    },
    {
      "id": "4zibiz6gw4",
      "type": "component",
      "difficulty": "medium",
      "frequency": 39,
      "interviewImportance": "low",
      "description": "A component that displays floating content next to a trigger element.",
      "relatedTerms": [],
      "codeExample": "<Popover open={open} anchorEl={anchorEl}><Paper>Popover content</Paper></Popover>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Popover",
      "definition": "A component that displays floating content next to a trigger element.",
      "category": "Feedback Components",
      "example": "<Popover open={open} anchorEl={anchorEl}><Paper>Popover content</Paper></Popover>"
    },
    {
      "id": "uaadtn2e8z",
      "type": "component",
      "difficulty": "medium",
      "frequency": 56,
      "interviewImportance": "high",
      "description": "A circular progress indicator that shows completion percentage.",
      "relatedTerms": [],
      "codeExample": "<ProgressCircle value={75} size={40} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "ProgressCircle",
      "definition": "A circular progress indicator that shows completion percentage.",
      "category": "Feedback Components",
      "example": "<ProgressCircle value={75} size={40} />"
    },
    {
      "id": "0x11chj7ch",
      "type": "component",
      "difficulty": "medium",
      "frequency": 66,
      "interviewImportance": "medium",
      "description": "A compact element that represents an input, attribute, or action.",
      "relatedTerms": [],
      "codeExample": "<Chip label='React' onDelete={handleDelete} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Chip",
      "definition": "A compact element that represents an input, attribute, or action.",
      "category": "Feedback Components",
      "example": "<Chip label='React' onDelete={handleDelete} />"
    },
    {
      "id": "p42nz11ljt",
      "type": "component",
      "difficulty": "medium",
      "frequency": 83,
      "interviewImportance": "low",
      "description": "A component that represents a user, group, or entity with an image, icon, or initials.",
      "relatedTerms": [],
      "codeExample": "<Avatar src='user.jpg' alt='User' />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Avatar",
      "definition": "A component that represents a user, group, or entity with an image, icon, or initials.",
      "category": "Data Display Components",
      "example": "<Avatar src='user.jpg' alt='User' />"
    },
    {
      "id": "39a0fwu1pk",
      "type": "component",
      "difficulty": "easy",
      "frequency": 76,
      "interviewImportance": "high",
      "description": "A graphical symbol used to represent a function, concept, or entity.",
      "relatedTerms": [],
      "codeExample": "<Icon name='home' size={24} color='primary' />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Icon",
      "definition": "A graphical symbol used to represent a function, concept, or entity.",
      "category": "Data Display Components",
      "example": "<Icon name='home' size={24} color='primary' />"
    },
    {
      "id": "ukpkguxz8u",
      "type": "component",
      "difficulty": "easy",
      "frequency": 92,
      "interviewImportance": "high",
      "description": "A component that displays an image with additional functionality like lazy loading.",
      "relatedTerms": [],
      "codeExample": "<Image src='image.jpg' alt='Description' lazy={true} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Image",
      "definition": "A component that displays an image with additional functionality like lazy loading.",
      "category": "Data Display Components",
      "example": "<Image src='image.jpg' alt='Description' lazy={true} />"
    },
    {
      "id": "wyf0zycgul",
      "type": "component",
      "difficulty": "medium",
      "frequency": 81,
      "interviewImportance": "high",
      "description": "A powerful table component with sorting, filtering, and pagination capabilities.",
      "relatedTerms": [],
      "codeExample": "<DataGrid rows={rows} columns={columns} pageSize={5} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "DataGrid",
      "definition": "A powerful table component with sorting, filtering, and pagination capabilities.",
      "category": "Data Display Components",
      "example": "<DataGrid rows={rows} columns={columns} pageSize={5} />"
    },
    {
      "id": "0oudx3uwkt",
      "type": "component",
      "difficulty": "medium",
      "frequency": 24,
      "interviewImportance": "high",
      "description": "A component that visualizes data in various formats like bar, line, or pie charts.",
      "relatedTerms": [],
      "codeExample": "<Chart type='bar' data={chartData} options={chartOptions} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Chart",
      "definition": "A component that visualizes data in various formats like bar, line, or pie charts.",
      "category": "Data Display Components",
      "example": "<Chart type='bar' data={chartData} options={chartOptions} />"
    },
    {
      "id": "trrjajjs6k",
      "type": "component",
      "difficulty": "easy",
      "frequency": 85,
      "interviewImportance": "medium",
      "description": "A component that displays days, weeks, or months in a grid format.",
      "relatedTerms": [],
      "codeExample": "<Calendar value={date} onChange={handleDateChange} />",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Calendar",
      "definition": "A component that displays days, weeks, or months in a grid format.",
      "category": "Data Display Components",
      "example": "<Calendar value={date} onChange={handleDateChange} />"
    },
    {
      "id": "xd5n9hjh8h",
      "type": "component",
      "difficulty": "medium",
      "frequency": 91,
      "interviewImportance": "medium",
      "description": "A slideshow component for cycling through elements.",
      "relatedTerms": [],
      "codeExample": "<Carousel><Slide>Image 1</Slide><Slide>Image 2</Slide></Carousel>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Carousel",
      "definition": "A slideshow component for cycling through elements.",
      "category": "Data Display Components",
      "example": "<Carousel><Slide>Image 1</Slide><Slide>Image 2</Slide></Carousel>"
    },
    {
      "id": "02zc94ntff",
      "type": "component",
      "difficulty": "medium",
      "frequency": 18,
      "interviewImportance": "medium",
      "description": "A component that categorizes or marks content with keywords.",
      "relatedTerms": [],
      "codeExample": "<Tag color='blue'>New</Tag>",
      "commonQuestions": [],
      "createdAt": 1747749738250,
      "term": "Tag",
      "definition": "A component that categorizes or marks content with keywords.",
      "category": "Data Display Components",
      "example": "<Tag color='blue'>New</Tag>"
    }
  ]
}