{
  "metadata": {
    "version": "1.0.0",
    "lastUpdated": "2025-05-19T13:13:48.378Z",
    "totalTerms": 1079,
    "categories": [
      "Core Concepts",
      "Modern Features",
      "Design Patterns",
      "Testing",
      "Memory",
      "Async",
      "Security",
      "Development",
      "Performance"
    ]
  },
  "vocabulary": [
    {
      "term": "Asynchronous Powerhouse",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript's event-driven, non-blocking I/O model makes it exceptional at handling concurrency without the complexities of traditional threading. The async/await syntax makes this power accessible and readable.",
      "example": "JavaScript's event-driven, non-blocking I/O model makes it exceptional at handling concurrency without the complexities of traditional threading. The async/await syntax makes this power accessible and readable.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Universal Runtime",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "With Node.js, JavaScript runs everywhere—browsers, servers, mobile, IoT devices. Mastering it makes you a versatile programmer in many contexts.",
      "example": "With Node.js, JavaScript runs everywhere—browsers, servers, mobile, IoT devices. Mastering it makes you a versatile programmer in many contexts.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Rich Ecosystem",
      "type": "Noun Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "npm is the world's largest software registry. Whether you need a full framework like React, a utility library like Lodash, or specialized tools for data visualization or server-side rendering, the ecosystem has mature solutions ready to use.",
      "example": "npm is the world's largest software registry. Whether you need a full framework like React, a utility library like Lodash, or specialized tools for data visualization or server-side rendering, the ecosystem has mature solutions ready to use.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dynamic and Flexible",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript's dynamic typing and prototype-based object system offer incredible flexibility.",
      "example": "JavaScript's dynamic typing and prototype-based object system offer incredible flexibility.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "JavaScript's Strengths:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript's Strengths:",
      "example": "JavaScript's Strengths:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Where JavaScript Excels:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Where JavaScript Excels:",
      "example": "Where JavaScript Excels:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Where to Look Elsewhere:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Where to Look Elsewhere:",
      "example": "Where to Look Elsewhere:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interactive Web Applications",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interactive Web Applications",
      "example": "Interactive Web Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Scalable Microservices",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Scalable Microservices",
      "example": "Scalable Microservices",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Isomorphic Applications",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Isomorphic Applications",
      "example": "Isomorphic Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "CPU-Intensive Tasks",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "CPU-Intensive Tasks",
      "example": "CPU-Intensive Tasks",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Static Type Safety",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Static Type Safety",
      "example": "Static Type Safety",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memory-Critical Applications",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Memory-Critical Applications",
      "example": "Memory-Critical Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Multi-threaded Processing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Multi-threaded Processing",
      "example": "Multi-threaded Processing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Why",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Why",
      "example": "Why",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Beyond",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Beyond",
      "example": "Beyond",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Javascript",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Javascript",
      "example": "Javascript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "BigInt",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Represents integers with arbitrary precision",
      "example": "Represents integers with arbitrary precision",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Always Use Strict Equality (===)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Handle NaN Correctly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Use Modern Optional Chaining",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Foundation: JavaScript's Type System",
      "type": "Noun Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Foundation: JavaScript's Type System",
      "example": "The Foundation: JavaScript's Type System",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Type Coercion: The Good, The Bad, and The Ugly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Type Coercion: The Good, The Bad, and The Ugly",
      "example": "Type Coercion: The Good, The Bad, and The Ugly",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Best Practices for Interview and Production Code:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Best Practices for Interview and Production Code:",
      "example": "Best Practices for Interview and Production Code:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Number**: Represents both integers and floating-point**: **Number**: Represents both integers and floating-point",
      "example": "Number**: Represents both integers and floating-point**: **Number**: Represents both integers and floating-point",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "String**: Immutable text data**: **String**: Immutable text data",
      "example": "String**: Immutable text data**: **String**: Immutable text data",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Boolean**: true or false**: **Boolean**: true or false",
      "example": "Boolean**: true or false**: **Boolean**: true or false",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Undefined**: Variable exists but has no assigned value**: **Undefined**: Variable exists but has no assigned value",
      "example": "Undefined**: Variable exists but has no assigned value**: **Undefined**: Variable exists but has no assigned value",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Null**: Absence of any object value**: **Null**: Absence of any object value",
      "example": "Null**: Absence of any object value**: **Null**: Absence of any object value",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Symbol**: Unique identifier, often used as object keys**: **Symbol**: Unique identifier, often used as object keys",
      "example": "Symbol**: Unique identifier, often used as object keys**: **Symbol**: Unique identifier, often used as object keys",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Understanding",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding",
      "example": "Understanding",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "While",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "While",
      "example": "While",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Everything",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Everything",
      "example": "Everything",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "When",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When",
      "example": "When",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Convenient",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Convenient",
      "example": "Convenient",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Hello",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello",
      "example": "Hello",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "World",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "World",
      "example": "World",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Score",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Score",
      "example": "Score",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Hello",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello",
      "example": "Hello",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Hello World",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello World",
      "example": "Hello World",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Score:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Score:",
      "example": "Score:",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Score: 42",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Score: 42",
      "example": "Score: 42",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Unexpected",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Unexpected",
      "example": "Unexpected",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Really",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Really",
      "example": "Really",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Object",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object",
      "example": "Object",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "[object Object]",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[object Object]",
      "example": "[object Object]",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "5",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "5",
      "example": "5",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "isNaN",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "isNaN",
      "example": "isNaN",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "123",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "123",
      "example": "123",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "hello",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "hello",
      "example": "hello",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "processValue",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processValue",
      "example": "processValue",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "isArray",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "isArray",
      "example": "isArray",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Checking",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Checking",
      "example": "Checking",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "null",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "null",
      "example": "null",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "array",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "array",
      "example": "array",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Good:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Good:",
      "example": "Good:",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "string",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "string",
      "example": "string",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "concatenation",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "concatenation",
      "example": "concatenation",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "\"Hello",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Hello",
      "example": "\"Hello",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "World\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "World\"",
      "example": "World\"",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "\"Score:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Score:",
      "example": "\"Score:",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "42\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "42\"",
      "example": "42\"",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Bad:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Bad:",
      "example": "Bad:",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "results",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "results",
      "example": "results",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "\"1,23,4\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"1,23,4\"",
      "example": "\"1,23,4\"",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "(arrays",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "(arrays",
      "example": "(arrays",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "convert",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "convert",
      "example": "convert",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "to",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "to",
      "example": "to",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "strings!)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "strings!)",
      "example": "strings!)",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Ugly:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Ugly:",
      "example": "Ugly:",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "unexpected",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "unexpected",
      "example": "unexpected",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "\"[object",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"[object",
      "example": "\"[object",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Object]\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object]\"",
      "example": "Object]\"",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "0",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "0",
      "example": "0",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "(JavaScript",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "(JavaScript",
      "example": "(JavaScript",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "interprets",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "interprets",
      "example": "interprets",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "empty",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "empty",
      "example": "empty",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "block!)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "block!)",
      "example": "block!)",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Data Privacy (The Module Pattern)",
      "type": "Noun Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "State Management in Event Handlers",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Loop Variable Problem",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memory Management",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Lexical Scope: The Foundation",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Lexical Scope: The Foundation",
      "example": "Lexical Scope: The Foundation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding Closures: Functions with Memory",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding Closures: Functions with Memory",
      "example": "Understanding Closures: Functions with Memory",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Practical Applications: Why Closures Matter",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Practical Applications: Why Closures Matter",
      "example": "Practical Applications: Why Closures Matter",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Pitfalls and Solutions",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Pitfalls and Solutions",
      "example": "Common Pitfalls and Solutions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "outer",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "outer",
      "example": "outer",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "inner",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "inner",
      "example": "inner",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "scopes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "scopes",
      "example": "scopes",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "globalMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "globalMessage",
      "example": "globalMessage",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "outerMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "outerMessage",
      "example": "outerMessage",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "innerMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "innerMessage",
      "example": "innerMessage",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "createGreeting",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createGreeting",
      "example": "createGreeting",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "forms",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "forms",
      "example": "forms",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greetJohn",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greetJohn",
      "example": "greetJohn",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greetJane",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greetJane",
      "example": "greetJane",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greeting",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greeting",
      "example": "greeting",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "JavaScript",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript",
      "example": "JavaScript",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Scoping",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Scoping",
      "example": "Scoping",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Grasping",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Grasping",
      "example": "Grasping",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Let",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Let",
      "example": "Let",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Think",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Think",
      "example": "Think",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Variables",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Variables",
      "example": "Variables",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Global",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Global",
      "example": "Global",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "I",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "I",
      "example": "I",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "I'm available everywhere",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "I'm available everywhere",
      "example": "I'm available everywhere",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "This",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "This",
      "example": "This",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "box",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "box",
      "example": "box",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "I'm available to my children",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "I'm available to my children",
      "example": "I'm available to my children",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "I'm only available here",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "I'm only available here",
      "example": "I'm only available here",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "We",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "We",
      "example": "We",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Works",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Works",
      "example": "Works",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Own",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Own",
      "example": "Own",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Parent",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Parent",
      "example": "Parent",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "look outward",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "look outward",
      "example": "look outward",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Error",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Error",
      "example": "Error",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Can",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Can",
      "example": "Can",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "They",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "They",
      "example": "They",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Hello",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello",
      "example": "Hello",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Hello,",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello,",
      "example": "Hello,",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Each",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Each",
      "example": "Each",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Prints",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Prints",
      "example": "Prints",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "remembers",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "remembers",
      "example": "remembers",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Hello, John",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello, John",
      "example": "Hello, John",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Hello, Jane",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello, Jane",
      "example": "Hello, Jane",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "createBankAccount",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createBankAccount",
      "example": "createBankAccount",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "initialBalance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "initialBalance",
      "example": "initialBalance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "getBalance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getBalance",
      "example": "getBalance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Deposited",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Deposited",
      "example": "Deposited",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "New",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "New",
      "example": "New",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Invalid",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Invalid",
      "example": "Invalid",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Invalid deposit amount",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Invalid deposit amount",
      "example": "Invalid deposit amount",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Deposited ${amount}. New balance: ${balance}",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Deposited ${amount}. New balance: ${balance}",
      "example": "Deposited ${amount}. New balance: ${balance}",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "createCounter",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createCounter",
      "example": "createCounter",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "addEventListener",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "addEventListener",
      "example": "addEventListener",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "textContent",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "textContent",
      "example": "textContent",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Clicked",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Clicked",
      "example": "Clicked",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "click",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "click",
      "example": "click",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Clicked ${count} times",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Clicked ${count} times",
      "example": "Clicked ${count} times",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Click me",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Click me",
      "example": "Click me",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "setTimeout",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "setTimeout",
      "example": "setTimeout",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Problematic",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Problematic",
      "example": "Problematic",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "largeData",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "largeData",
      "example": "largeData",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "potentialMemoryLeak",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "potentialMemoryLeak",
      "example": "potentialMemoryLeak",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Entire",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Entire",
      "example": "Entire",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Array",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Array",
      "example": "Array",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "efficientClosure",
      "type": "Adjective",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "efficientClosure",
      "example": "efficientClosure",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "firstItem",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "firstItem",
      "example": "firstItem",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Better",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Better",
      "example": "Better",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Only",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Only",
      "example": "Only",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "variables",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "variables",
      "example": "variables",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "the",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "the",
      "example": "the",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "outermost",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "outermost",
      "example": "outermost",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "-",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "-",
      "example": "-",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "always",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "always",
      "example": "always",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "visible",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "visible",
      "example": "visible",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "creates",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "creates",
      "example": "creates",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "new",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "new",
      "example": "new",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "\"box\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"box\"",
      "example": "\"box\"",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "inside",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "inside",
      "example": "inside",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "smallest",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "smallest",
      "example": "smallest",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "\"box\",",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"box\",",
      "example": "\"box\",",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "nested",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "nested",
      "example": "nested",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "both",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "both",
      "example": "both",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "previous",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "previous",
      "example": "previous",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "ones",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "ones",
      "example": "ones",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "can",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "can",
      "example": "can",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "\"look",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"look",
      "example": "\"look",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "outward\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "outward\"",
      "example": "outward\"",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "any",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "any",
      "example": "any",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "containing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "containing",
      "example": "containing",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Works:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Works:",
      "example": "Works:",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "console.log(innerMessage);",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "console.log(innerMessage);",
      "example": "console.log(innerMessage);",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "//",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "//",
      "example": "//",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Error:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Error:",
      "example": "Error:",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "Can't",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Can't",
      "example": "Can't",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "into",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "into",
      "example": "into",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "console.log(outerMessage);",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "console.log(outerMessage);",
      "example": "console.log(outerMessage);",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "function",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "function",
      "example": "function",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "closure,",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "closure,",
      "example": "closure,",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "capturing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "capturing",
      "example": "capturing",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "'greeting'",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "'greeting'",
      "example": "'greeting'",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Let's",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Let's",
      "example": "Let's",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "two",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "two",
      "example": "two",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "different",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "different",
      "example": "different",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greetings",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greetings",
      "example": "greetings",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "\"remembers\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"remembers\"",
      "example": "\"remembers\"",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "its",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "its",
      "example": "its",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "own",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "own",
      "example": "own",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "version",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "version",
      "example": "version",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "of",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "of",
      "example": "of",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Prints:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Prints:",
      "example": "Prints:",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "\"Hello,",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Hello,",
      "example": "\"Hello,",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "John\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "John\"",
      "example": "John\"",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "Jane\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Jane\"",
      "example": "Jane\"",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "The Event Loop: JavaScript's Heart",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Event Loop: JavaScript's Heart",
      "example": "The Event Loop: JavaScript's Heart",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Evolution of Asynchronous Programming",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Evolution of Asynchronous Programming",
      "example": "The Evolution of Asynchronous Programming",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "1. Callback Style: The Traditional Approach",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "1. Callback Style: The Traditional Approach",
      "example": "1. Callback Style: The Traditional Approach",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "2. Promises: A Step Forward",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "2. Promises: A Step Forward",
      "example": "2. Promises: A Step Forward",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "3. Async/Await: Modern Elegance",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "3. Async/Await: Modern Elegance",
      "example": "3. Async/Await: Modern Elegance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tips for Coding Interviews",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tips for Coding Interviews",
      "example": "Tips for Coding Interviews",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Call Stack (the 'road' for synchronous code)",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Call Stack (the 'road' for synchronous code)",
      "example": "The Call Stack (the 'road' for synchronous code)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Task Queue (the 'waiting area' for longer tasks)",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Task Queue (the 'waiting area' for longer tasks)",
      "example": "The Task Queue (the 'waiting area' for longer tasks)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Microtask Queue (the 'express lane' for high-priority tasks)",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Microtask Queue (the 'express lane' for high-priority tasks)",
      "example": "The Microtask Queue (the 'express lane' for high-priority tasks)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "getUserData",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getUserData",
      "example": "getUserData",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "user",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "user",
      "example": "user",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "loadUserProfile",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "loadUserProfile",
      "example": "loadUserProfile",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "loadMultipleProfiles",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "loadMultipleProfiles",
      "example": "loadMultipleProfiles",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "posts",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "posts",
      "example": "posts",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "comments",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "comments",
      "example": "comments",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "profiles",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "profiles",
      "example": "profiles",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Applications",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Applications",
      "example": "Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "UI",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "UI",
      "example": "UI",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "To",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "To",
      "example": "To",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "It",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "It",
      "example": "It",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "setTimeout",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "setTimeout",
      "example": "setTimeout",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Cooking",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Cooking",
      "example": "Cooking",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Regular",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Regular",
      "example": "Regular",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Runs",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Runs",
      "example": "Runs",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Preparing",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Preparing",
      "example": "Preparing",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Cooking starts",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Cooking starts",
      "example": "Cooking starts",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "The sides are ready",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The sides are ready",
      "example": "The sides are ready",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "The main dish is ready",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The main dish is ready",
      "example": "The main dish is ready",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Preparing dessert",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Preparing dessert",
      "example": "Preparing dessert",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Output",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Output",
      "example": "Output",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "userId",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userId",
      "example": "userId",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Sarah",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sarah",
      "example": "Sarah",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "handleError",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "handleError",
      "example": "handleError",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "getUserPosts",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getUserPosts",
      "example": "getUserPosts",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "getPostComments",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getPostComments",
      "example": "getPostComments",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "displayComments",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "displayComments",
      "example": "displayComments",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Using",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Using",
      "example": "Using",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "fetchFromPrimaryServer",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fetchFromPrimaryServer",
      "example": "fetchFromPrimaryServer",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "fetchFromBackupServer",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fetchFromBackupServer",
      "example": "fetchFromBackupServer",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "Handling",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Handling",
      "example": "Handling",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "All",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "All",
      "example": "All",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "All responses:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "All responses:",
      "example": "All responses:",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "First",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "First",
      "example": "First",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "First response:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "First response:",
      "example": "First response:",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "Failed",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Failed",
      "example": "Failed",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Failed to load profile:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Failed to load profile:",
      "example": "Failed to load profile:",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "userIds",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userIds",
      "example": "userIds",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Running",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Running",
      "example": "Running",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Failed to load profiles:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Failed to load profiles:",
      "example": "Failed to load profiles:",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "When",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When",
      "example": "When",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "How",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "How",
      "example": "How",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Performance",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Performance",
      "example": "Performance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "1:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "1:",
      "example": "1:",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "4:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "4:",
      "example": "4:",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "after",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "after",
      "example": "after",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "0ms",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "0ms",
      "example": "0ms",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "delay",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "delay",
      "example": "delay",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "3:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "3:",
      "example": "3:",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "2:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "2:",
      "example": "2:",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "Output:",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Output:",
      "example": "Output:",
      "relatedTerms": [],
      "codeExample": "console.log(\"Cooking starts\"); // 1: Regular synchronous code\nsetTimeout(() => {\n  console.log(\"The sides are ready\"); // 4: Runs after 0ms delay\n}, 0);\nPromise.resolve().then(() => console.log(\"The main dish is ready\")); // 3: Microtask\nconsole.log(\"Preparing dessert\"); // 2: Regular synchronous code\n\n// Output:\n// Cooking starts\n// Preparing dessert\n// The main dish is ready\n// The sides are ready",
      "commonQuestions": []
    },
    {
      "term": "callbacks",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "callbacks",
      "example": "callbacks",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "can",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "can",
      "example": "can",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "messy",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "messy",
      "example": "messy",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "quickly",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "quickly",
      "example": "quickly",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "allow",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "allow",
      "example": "allow",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "cleaner",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "cleaner",
      "example": "cleaner",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "chaining",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "chaining",
      "example": "chaining",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "multiple",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "multiple",
      "example": "multiple",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "promises",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "promises",
      "example": "promises",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = { id: userId, name: \"Sarah\" };\n      resolve(user);\n    }, 1000);\n  });\n}\n\n// Promises allow for cleaner chaining\ngetUserData(123)\n  .then((user) => getUserPosts(user.id))\n  .then((posts) => getPostComments(posts[0].id))\n  .then((comments) => displayComments(comments))\n  .catch((error) => handleError(error));\n\n// Handling multiple promises\nPromise.all([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (results) => console.log(\"All responses:\", results)\n);\n\nPromise.race([fetchFromPrimaryServer(), fetchFromBackupServer()]).then(\n  (result) => console.log(\"First response:\", result)\n);",
      "commonQuestions": []
    },
    {
      "term": "operations",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "operations",
      "example": "operations",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "parallel",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "parallel",
      "example": "parallel",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "The Foundation: Prototypal Inheritance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Foundation: Prototypal Inheritance",
      "example": "The Foundation: Prototypal Inheritance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Modern Way: ES6 Classes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Modern Way: ES6 Classes",
      "example": "The Modern Way: ES6 Classes",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Modern Features: Private Fields and Methods",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Modern Features: Private Fields and Methods",
      "example": "Modern Features: Private Fields and Methods",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Preparing for Coding Interviews",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Preparing for Coding Interviews",
      "example": "Preparing for Coding Interviews",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "animal",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "animal",
      "example": "animal",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "dog",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dog",
      "example": "dog",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Animal",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Animal",
      "example": "Animal",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "itself",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "itself",
      "example": "itself",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Dog",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dog",
      "example": "Dog",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "BankAccount",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "BankAccount",
      "example": "BankAccount",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "account",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "account",
      "example": "account",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "JavaScript",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript",
      "example": "JavaScript",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "From",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "From",
      "example": "From",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Prototypes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Prototypes",
      "example": "Prototypes",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding",
      "example": "Understanding",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Every",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Every",
      "example": "Every",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "When",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When",
      "example": "When",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "If",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "If",
      "example": "If",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "makeSound",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "makeSound",
      "example": "makeSound",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Create",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Create",
      "example": "Create",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Some",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Some",
      "example": "Some",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Eating",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Eating",
      "example": "Eating",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Some sound",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Some sound",
      "example": "Some sound",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Eating...",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Eating...",
      "example": "Eating...",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Woof",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Woof",
      "example": "Woof",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Woof!",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Woof!",
      "example": "Woof!",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "setPrototypeOf",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "setPrototypeOf",
      "example": "setPrototypeOf",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Set",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Set",
      "example": "Set",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Object",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object",
      "example": "Object",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Now",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Now",
      "example": "Now",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "isAnimal",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "isAnimal",
      "example": "isAnimal",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Static",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Static",
      "example": "Static",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Must",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Must",
      "example": "Must",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "${this.name} says Woof!",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "${this.name} says Woof!",
      "example": "${this.name} says Woof!",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Override",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Override",
      "example": "Override",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Getters",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Getters",
      "example": "Getters",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "${this.name} is a ${this.breed}",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "${this.name} is a ${this.breed}",
      "example": "${this.name} is a ${this.breed}",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Setters",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Setters",
      "example": "Setters",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Error",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Error",
      "example": "Error",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Nickname",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Nickname",
      "example": "Nickname",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Nickname is too short!",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Nickname is too short!",
      "example": "Nickname is too short!",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "One",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "One",
      "example": "One",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "These",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "These",
      "example": "These",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "transactionHistory",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "transactionHistory",
      "example": "transactionHistory",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "validateAmount",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "validateAmount",
      "example": "validateAmount",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Invalid",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Invalid",
      "example": "Invalid",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "number",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "number",
      "example": "number",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Invalid amount",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Invalid amount",
      "example": "Invalid amount",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Date",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Date",
      "example": "Date",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "deposit",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "deposit",
      "example": "deposit",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Public",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Public",
      "example": "Public",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "SyntaxError",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "SyntaxError",
      "example": "SyntaxError",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Demonstrate",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Demonstrate",
      "example": "Demonstrate",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Show",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Show",
      "example": "Show",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Always",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Always",
      "example": "Always",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Use",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Use",
      "example": "Use",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Be",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Be",
      "example": "Be",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Classical",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Classical",
      "example": "Classical",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Composition",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Composition",
      "example": "Composition",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "base",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "base",
      "example": "base",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "object",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "object",
      "example": "object",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "with",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "with",
      "example": "with",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "some",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "some",
      "example": "some",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "shared",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "shared",
      "example": "shared",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "functionality",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "functionality",
      "example": "functionality",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "more",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "more",
      "example": "more",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "specific",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "specific",
      "example": "specific",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "dog's",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dog's",
      "example": "dog's",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "prototype",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "prototype",
      "example": "prototype",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "can",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "can",
      "example": "can",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "use",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "use",
      "example": "use",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "methods",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "methods",
      "example": "methods",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "from",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "from",
      "example": "from",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "both",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "both",
      "example": "both",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "\"Woof!\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Woof!\"",
      "example": "\"Woof!\"",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "(found",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "(found",
      "example": "(found",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "dog)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dog)",
      "example": "dog)",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "\"Some",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Some",
      "example": "\"Some",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "sound\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "sound\"",
      "example": "sound\"",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "animal)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "animal)",
      "example": "animal)",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "\"Eating...\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Eating...\"",
      "example": "\"Eating...\"",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "undefined",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "undefined",
      "example": "undefined",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "(not",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "(not",
      "example": "(not",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "anywhere",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "anywhere",
      "example": "anywhere",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "the",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "the",
      "example": "the",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "chain)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "chain)",
      "example": "chain)",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "belong",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "belong",
      "example": "belong",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "class",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "class",
      "example": "class",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "itself,",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "itself,",
      "example": "itself,",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "instances",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "instances",
      "example": "instances",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "call",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "call",
      "example": "call",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "super()",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "super()",
      "example": "super()",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "before",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "before",
      "example": "before",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "using",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "using",
      "example": "using",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "'this'",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "'this'",
      "example": "'this'",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "parent's",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "parent's",
      "example": "parent's",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "properties",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "properties",
      "example": "properties",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "readable",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "readable",
      "example": "readable",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "allow",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "allow",
      "example": "allow",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "controlled",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "controlled",
      "example": "controlled",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "property",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "property",
      "example": "property",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "updates",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "updates",
      "example": "updates",
      "relatedTerms": [],
      "codeExample": "class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Some sound\";\n  }\n\n  // Static methods belong to the class itself, not instances\n  static isAnimal(obj) {\n    return obj instanceof Animal;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    // Must call super() before using 'this'\n    super(name);\n    this.breed = breed;\n  }\n\n  bark() {\n    return `${this.name} says Woof!`;\n  }\n\n  // Override the parent's method\n  makeSound() {\n    return this.bark();\n  }\n\n  // Getters make properties readable\n  get description() {\n    return `${this.name} is a ${this.breed}`;\n  }\n\n  // Setters allow controlled property updates\n  set nickname(value) {\n    if (value.length < 2) {\n      throw new Error(\"Nickname is too short!\");\n    }\n    this._nickname = value;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "fields",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fields",
      "example": "fields",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "start",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "start",
      "example": "start",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "#",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "#",
      "example": "#",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "getter",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getter",
      "example": "getter",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "provides",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "provides",
      "example": "provides",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "read-only",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "read-only",
      "example": "read-only",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "access",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "access",
      "example": "access",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "private",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "private",
      "example": "private",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "100",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "100",
      "example": "100",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "console.log(account.#balance);",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "console.log(account.#balance);",
      "example": "console.log(account.#balance);",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "//",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "//",
      "example": "//",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "SyntaxError:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "SyntaxError:",
      "example": "SyntaxError:",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Arrow Functions and the Evolution of this",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Arrow Functions and the Evolution of this",
      "example": "Arrow Functions and the Evolution of this",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Destructuring: Elegant Data Extraction",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Destructuring: Elegant Data Extraction",
      "example": "Destructuring: Elegant Data Extraction",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Spread Operator: Immutable Operations Made Simple",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Spread Operator: Immutable Operations Made Simple",
      "example": "The Spread Operator: Immutable Operations Made Simple",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Template Literals: Beyond Simple String Concatenation",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Template Literals: Beyond Simple String Concatenation",
      "example": "Template Literals: Beyond Simple String Concatenation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Nullish Coalescing",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Nullish Coalescing",
      "example": "Nullish Coalescing",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "Interview Success Tips",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Success Tips",
      "example": "Interview Success Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "addClickListener",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "addClickListener",
      "example": "addClickListener",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "addClickListenerArrow",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "addClickListenerArrow",
      "example": "addClickListenerArrow",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Button",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Button",
      "example": "Button",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "obj",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "obj",
      "example": "obj",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "user",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "user",
      "example": "user",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "arr1",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "arr1",
      "example": "arr1",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "arr2",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "arr2",
      "example": "arr2",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "combined",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "combined",
      "example": "combined",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "clone",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "clone",
      "example": "clone",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "defaults",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "defaults",
      "example": "defaults",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "userPrefs",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userPrefs",
      "example": "userPrefs",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "settings",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "settings",
      "example": "settings",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "name",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "name",
      "example": "name",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "age",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "age",
      "example": "age",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "greeting",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greeting",
      "example": "greeting",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "email",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "email",
      "example": "email",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "count",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "count",
      "example": "count",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "value",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "value",
      "example": "value",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Modern",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Modern",
      "example": "Modern",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Features",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Features",
      "example": "Features",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Deep",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Deep",
      "example": "Deep",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dive",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dive",
      "example": "Dive",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Today",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Today",
      "example": "Today",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "JavaScript",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript",
      "example": "JavaScript",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Let",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Let",
      "example": "Let",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "With",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "With",
      "example": "With",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Click me",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Click me",
      "example": "Click me",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "addEventListener",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "addEventListener",
      "example": "addEventListener",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Problem",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Problem",
      "example": "Problem",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "click",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "click",
      "example": "click",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Solution",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Solution",
      "example": "Solution",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "badMethod",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "badMethod",
      "example": "badMethod",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "goodMethod",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "goodMethod",
      "example": "goodMethod",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Caveats",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Caveats",
      "example": "Caveats",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Object",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object",
      "example": "Object",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Don",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Don",
      "example": "Don",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "John",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "John",
      "example": "John",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Main",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Main",
      "example": "Main",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Boston",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Boston",
      "example": "Boston",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "123 Main St",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "123 Main St",
      "example": "123 Main St",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Basic",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Basic",
      "example": "Basic",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Nested",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Nested",
      "example": "Nested",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "userName",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userName",
      "example": "userName",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Renaming",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Renaming",
      "example": "Renaming",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Default",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Default",
      "example": "Default",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "USA",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "USA",
      "example": "USA",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Rest",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Rest",
      "example": "Rest",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Array",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Array",
      "example": "Array",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "Clone",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Clone",
      "example": "Clone",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "dark",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dark",
      "example": "dark",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "fr",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fr",
      "example": "fr",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "Hello",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello",
      "example": "Hello",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "Hello, ${name}!",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hello, ${name}!",
      "example": "Hello, ${name}!",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "Multi",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Multi",
      "example": "Multi",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "Dear",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dear",
      "example": "Dear",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "This",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "This",
      "example": "This",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Best",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Best",
      "example": "Best",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "Team",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Team",
      "example": "Team",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "OR",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "OR",
      "example": "OR",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Old",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Old",
      "example": "Old",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "Falls",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Falls",
      "example": "Falls",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "defaultValue",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "defaultValue",
      "example": "defaultValue",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "Chaining",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Chaining",
      "example": "Chaining",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "VALUE",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "VALUE",
      "example": "VALUE",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "During",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "During",
      "example": "During",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Write",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Write",
      "example": "Write",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Use",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Use",
      "example": "Use",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Understand",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understand",
      "example": "Understand",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Show",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Show",
      "example": "Show",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "with",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "with",
      "example": "with",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "traditional",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "traditional",
      "example": "traditional",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "function",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "function",
      "example": "function",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "'this'",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "'this'",
      "example": "'this'",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "wrong!",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "wrong!",
      "example": "wrong!",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "arrow",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "arrow",
      "example": "arrow",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "correct!",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "correct!",
      "example": "correct!",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Don't",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Don't",
      "example": "Don't",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "functions",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "functions",
      "example": "functions",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "methods!",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "methods!",
      "example": "methods!",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "undefined",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "undefined",
      "example": "undefined",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "\"Object\"",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"Object\"",
      "example": "\"Object\"",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "destructuring",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "destructuring",
      "example": "destructuring",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "variables",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "variables",
      "example": "variables",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "values",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "values",
      "example": "values",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "spread",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "spread",
      "example": "spread",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "array",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "array",
      "example": "array",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "usage",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "usage",
      "example": "usage",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "Multi-line",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Multi-line",
      "example": "Multi-line",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "strings",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "strings",
      "example": "strings",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "way",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "way",
      "example": "way",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "||",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "||",
      "example": "||",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "back",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "back",
      "example": "back",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "if",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "if",
      "example": "if",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "false-y",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "false-y",
      "example": "false-y",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "nullish",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "nullish",
      "example": "nullish",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "coalescing",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "coalescing",
      "example": "coalescing",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "only",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "only",
      "example": "only",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "null/undefined",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "null/undefined",
      "example": "null/undefined",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "multiple",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "multiple",
      "example": "multiple",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "fallbacks",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fallbacks",
      "example": "fallbacks",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "Release",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When an object is no longer reachable through any references in your application, it becomes eligible for garbage collection.",
      "example": "When an object is no longer reachable through any references in your application, it becomes eligible for garbage collection.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Performance Panel",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Monitor memory usage over time",
      "example": "Monitor memory usage over time",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Memory Cycle: Allocate, Use, Release",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Memory Cycle: Allocate, Use, Release",
      "example": "The Memory Cycle: Allocate, Use, Release",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding the Garbage Collector",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding the Garbage Collector",
      "example": "Understanding the Garbage Collector",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Memory Leaks and How to Avoid Them",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Memory Leaks and How to Avoid Them",
      "example": "Common Memory Leaks and How to Avoid Them",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "1. The Global Variable Trap",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "1. The Global Variable Trap",
      "example": "1. The Global Variable Trap",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "2. Closure Complications",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "2. Closure Complications",
      "example": "2. Closure Complications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Debugging Memory Issues",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Debugging Memory Issues",
      "example": "Debugging Memory Issues",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interview Tips",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Tips",
      "example": "Interview Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "leak",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "leak",
      "example": "leak",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "noLeak",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "noLeak",
      "example": "noLeak",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "localVariable",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "localVariable",
      "example": "localVariable",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "createLeak",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createLeak",
      "example": "createLeak",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "return",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "return",
      "example": "return",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "createEfficientClosure",
      "type": "Adjective",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createEfficientClosure",
      "example": "createEfficientClosure",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "largeData",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "largeData",
      "example": "largeData",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "length",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "length",
      "example": "length",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Management",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Management",
      "example": "Management",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Collection",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Collection",
      "example": "Collection",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "JavaScript",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript",
      "example": "JavaScript",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "While",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "While",
      "example": "While",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Every",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Every",
      "example": "Every",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Allocation",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Allocation",
      "example": "Allocation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "During",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "During",
      "example": "During",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Mark",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Mark",
      "example": "Mark",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sweep",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sweep",
      "example": "Sweep",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Mark and Sweep",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Mark and Sweep",
      "example": "Mark and Sweep",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Starts",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Starts",
      "example": "Starts",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Follows",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Follows",
      "example": "Follows",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Marks",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Marks",
      "example": "Marks",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Any",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Any",
      "example": "Any",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "roots",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "roots",
      "example": "roots",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "found",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "found",
      "example": "found",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "accidentalGlobal",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "accidentalGlobal",
      "example": "accidentalGlobal",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Accidental",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Accidental",
      "example": "Accidental",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Oops",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Oops",
      "example": "Oops",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "This",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "This",
      "example": "This",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "I leak memory",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "I leak memory",
      "example": "I leak memory",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Solution",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Solution",
      "example": "Solution",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Always",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Always",
      "example": "Always",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Properly",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Properly",
      "example": "Properly",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "use strict",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "use strict",
      "example": "use strict",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "I get cleaned up",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "I get cleaned up",
      "example": "I get cleaned up",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Problematic",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Problematic",
      "example": "Problematic",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Array",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Array",
      "example": "Array",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "We",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "We",
      "example": "We",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Better",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Better",
      "example": "Better",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Only",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Only",
      "example": "Only",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Chrome",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Chrome",
      "example": "Chrome",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "DevTools",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "DevTools",
      "example": "DevTools",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Heap",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Heap",
      "example": "Heap",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Snapshots",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Snapshots",
      "example": "Snapshots",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Analyze",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Analyze",
      "example": "Analyze",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Timeline",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Timeline",
      "example": "Timeline",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Track",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Track",
      "example": "Track",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Demonstrate",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Demonstrate",
      "example": "Demonstrate",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Best",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Best",
      "example": "Best",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Show",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Show",
      "example": "Show",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Identify",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Identify",
      "example": "Identify",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Suggest",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Suggest",
      "example": "Suggest",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Explain",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Explain",
      "example": "Explain",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "global",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "global",
      "example": "global",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "(without",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "(without",
      "example": "(without",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "'let'",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "'let'",
      "example": "'let'",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "'const')",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "'const')",
      "example": "'const')",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Oops!",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Oops!",
      "example": "Oops!",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "now",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "now",
      "example": "now",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "variable",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "variable",
      "example": "variable",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "Solution:",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Solution:",
      "example": "Solution:",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "mode",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mode",
      "example": "mode",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "proper",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "proper",
      "example": "proper",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "declarations",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "declarations",
      "example": "declarations",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "scoped",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "scoped",
      "example": "scoped",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "closure",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "closure",
      "example": "closure",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "cannot",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "cannot",
      "example": "cannot",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "free",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "free",
      "example": "free",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "largeData,",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "largeData,",
      "example": "largeData,",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "because",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "because",
      "example": "because",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "it's",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "it's",
      "example": "it's",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "needed",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "needed",
      "example": "needed",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "by",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "by",
      "example": "by",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "function",
      "type": "Verb Phrase",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "function",
      "example": "function",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "approach",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "approach",
      "example": "approach",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "keep",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "keep",
      "example": "keep",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "what",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "what",
      "example": "what",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Observer Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Module Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Proxy Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Singleton Pattern: One and Only",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Singleton Pattern: One and Only",
      "example": "The Singleton Pattern: One and Only",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Factory Pattern: Creating Objects Flexibly",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Factory Pattern: Creating Objects Flexibly",
      "example": "The Factory Pattern: Creating Objects Flexibly",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dependency Injection",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dependency Injection",
      "example": "Dependency Injection",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Choosing the Right Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Choosing the Right Pattern",
      "example": "Choosing the Right Pattern",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Design Patterns in Modern JavaScript",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Design Patterns in Modern JavaScript",
      "example": "Common Design Patterns in Modern JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "createConnectionSingleton",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createConnectionSingleton",
      "example": "createConnectionSingleton",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "Database",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Database",
      "example": "Database",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "instance",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "instance",
      "example": "instance",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "UIFactory",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "UIFactory",
      "example": "UIFactory",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "ShoppingService",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "ShoppingService",
      "example": "ShoppingService",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "total",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "total",
      "example": "total",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Core",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Core",
      "example": "Core",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Experienced",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Experienced",
      "example": "Experienced",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Rather",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Rather",
      "example": "Rather",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Instance",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Instance",
      "example": "Instance",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "getInstance",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getInstance",
      "example": "getInstance",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "createButton",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createButton",
      "example": "createButton",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Centralized",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Centralized",
      "example": "Centralized",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "PrimaryButton",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "PrimaryButton",
      "example": "PrimaryButton",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "SecondaryButton",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "SecondaryButton",
      "example": "SecondaryButton",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "DangerButton",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "DangerButton",
      "example": "DangerButton",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Error",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Error",
      "example": "Error",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Unknown",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Unknown",
      "example": "Unknown",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "primary",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "primary",
      "example": "primary",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "secondary",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "secondary",
      "example": "secondary",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "danger",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "danger",
      "example": "danger",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Unknown button type",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Unknown button type",
      "example": "Unknown button type",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "createInput",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createInput",
      "example": "createInput",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Similar",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Similar",
      "example": "Similar",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "TextInput",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "TextInput",
      "example": "TextInput",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "NumberInput",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "NumberInput",
      "example": "NumberInput",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "text",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "text",
      "example": "text",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "number",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "number",
      "example": "number",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Unknown input type",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Unknown input type",
      "example": "Unknown input type",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "DI",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "DI",
      "example": "DI",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "cartRepository",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "cartRepository",
      "example": "cartRepository",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "paymentService",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "paymentService",
      "example": "paymentService",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Dependencies",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dependencies",
      "example": "Dependencies",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "calculateTotal",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "calculateTotal",
      "example": "calculateTotal",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "processPayment",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processPayment",
      "example": "processPayment",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "During",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "During",
      "example": "During",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "When",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When",
      "example": "When",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Consider",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Consider",
      "example": "Consider",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Evaluate",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Evaluate",
      "example": "Evaluate",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Choose",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Choose",
      "example": "Choose",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Ensure",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Ensure",
      "example": "Ensure",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "EventEmitter",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "EventEmitter",
      "example": "EventEmitter",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "forEach",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "forEach",
      "example": "forEach",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Counter",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Counter",
      "example": "Counter",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "getCount",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getCount",
      "example": "getCount",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Accessing",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Accessing",
      "example": "Accessing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Setting",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Setting",
      "example": "Setting",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "John",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "John",
      "example": "John",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Logs",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Logs",
      "example": "Logs",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "is",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "is",
      "example": "is",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "scoped",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "scoped",
      "example": "scoped",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "module",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "module",
      "example": "module",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "creation",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "creation",
      "example": "creation",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "logic",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "logic",
      "example": "logic",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "all",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "all",
      "example": "all",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "types",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "types",
      "example": "types",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "centralized",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "centralized",
      "example": "centralized",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "fields",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fields",
      "example": "fields",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "are",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "are",
      "example": "are",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "injected",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "injected",
      "example": "injected",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "rather",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "rather",
      "example": "rather",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "than",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "than",
      "example": "than",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "created",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "created",
      "example": "created",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "internally",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "internally",
      "example": "internally",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Test Structure",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Mocking Strategy",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Async Testing",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding Jest: The Swiss Army Knife of Testing",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding Jest: The Swiss Army Knife of Testing",
      "example": "Understanding Jest: The Swiss Army Knife of Testing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Art of Mocking: Controlling Your Test Environment",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Art of Mocking: Controlling Your Test Environment",
      "example": "The Art of Mocking: Controlling Your Test Environment",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Testing Asynchronous Code: Promises and Timing",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Testing Asynchronous Code: Promises and Timing",
      "example": "Testing Asynchronous Code: Promises and Timing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Pitfalls and Best Practices",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Pitfalls and Best Practices",
      "example": "Common Pitfalls and Best Practices",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interview Tips",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Tips",
      "example": "Interview Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "add",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "add",
      "example": "add",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "UserService",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "UserService",
      "example": "UserService",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "response",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "response",
      "example": "response",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockApiClient",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockApiClient",
      "example": "mockApiClient",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockDate",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockDate",
      "example": "mockDate",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "service",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "service",
      "example": "service",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "profile",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "profile",
      "example": "profile",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "DataService",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "DataService",
      "example": "DataService",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "data",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "data",
      "example": "data",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "dataPromise",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dataPromise",
      "example": "dataPromise",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "result",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "result",
      "example": "result",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "JavaScript",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript",
      "example": "JavaScript",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "While",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "While",
      "example": "While",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Even",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Even",
      "example": "Even",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "It",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "It",
      "example": "It",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "./calculator",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "./calculator",
      "example": "./calculator",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "toBe",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "toBe",
      "example": "toBe",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Calculator",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Calculator",
      "example": "Calculator",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "adds two numbers correctly",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "adds two numbers correctly",
      "example": "adds two numbers correctly",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "APIs",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "APIs",
      "example": "APIs",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "userService",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userService",
      "example": "userService",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "apiClient",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "apiClient",
      "example": "apiClient",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "getUserProfile",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getUserProfile",
      "example": "getUserProfile",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "userId",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userId",
      "example": "userId",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "lastAccessedAt",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "lastAccessedAt",
      "example": "lastAccessedAt",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "/users/${userId}",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "/users/${userId}",
      "example": "/users/${userId}",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockResolvedValue",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockResolvedValue",
      "example": "mockResolvedValue",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Create",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Create",
      "example": "Create",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Alice",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Alice",
      "example": "Alice",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "getUserProfile adds lastAccessedAt to profile",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getUserProfile adds lastAccessedAt to profile",
      "example": "getUserProfile adds lastAccessedAt to profile",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "spyOn",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "spyOn",
      "example": "spyOn",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockImplementation",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockImplementation",
      "example": "mockImplementation",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "2024-02-08",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "2024-02-08",
      "example": "2024-02-08",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "toEqual",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "toEqual",
      "example": "toEqual",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "toHaveBeenCalledWith",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "toHaveBeenCalledWith",
      "example": "toHaveBeenCalledWith",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Verify",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Verify",
      "example": "Verify",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "/users/123",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "/users/123",
      "example": "/users/123",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "dataService",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dataService",
      "example": "dataService",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "fetchData",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fetchData",
      "example": "fetchData",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "https://api.example.com/data",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "https://api.example.com/data",
      "example": "https://api.example.com/data",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "processDataWithRetry",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processDataWithRetry",
      "example": "processDataWithRetry",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "maxRetries",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "maxRetries",
      "example": "maxRetries",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "setTimeout",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "setTimeout",
      "example": "setTimeout",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "processDataWithRetry succeeds after temporary failure",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processDataWithRetry succeeds after temporary failure",
      "example": "processDataWithRetry succeeds after temporary failure",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockRejectedValueOnce",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockRejectedValueOnce",
      "example": "mockRejectedValueOnce",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockResolvedValueOnce",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockResolvedValueOnce",
      "example": "mockResolvedValueOnce",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Error",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Error",
      "example": "Error",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Network",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Network",
      "example": "Network",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Network error",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Network error",
      "example": "Network error",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "success",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "success",
      "example": "success",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "useFakeTimers",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "useFakeTimers",
      "example": "useFakeTimers",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Start",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Start",
      "example": "Start",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "runAllTimers",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "runAllTimers",
      "example": "runAllTimers",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Fast",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Fast",
      "example": "Fast",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Wait",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Wait",
      "example": "Wait",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "toHaveBeenCalledTimes",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "toHaveBeenCalledTimes",
      "example": "toHaveBeenCalledTimes",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Follow",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Follow",
      "example": "Follow",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Arrange",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Arrange",
      "example": "Arrange",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Act",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Act",
      "example": "Act",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Assert",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Assert",
      "example": "Assert",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Keep",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Keep",
      "example": "Keep",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Don",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Don",
      "example": "Don",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Handle",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Handle",
      "example": "Handle",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Coverage",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Coverage",
      "example": "Coverage",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Aim",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Aim",
      "example": "Aim",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Focus",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Focus",
      "example": "Focus",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "When",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When",
      "example": "When",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Show",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Show",
      "example": "Show",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Different",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Different",
      "example": "Different",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Write",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Write",
      "example": "Write",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Explain",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Explain",
      "example": "Explain",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Discuss",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Discuss",
      "example": "Discuss",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Demonstrate",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Demonstrate",
      "example": "Demonstrate",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "calculator.js",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "calculator.js",
      "example": "calculator.js",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "calculator.test.js",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "calculator.test.js",
      "example": "calculator.test.js",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "userService.js",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userService.js",
      "example": "userService.js",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "userService.test.js",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userService.test.js",
      "example": "userService.test.js",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "client",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "client",
      "example": "client",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "the",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "the",
      "example": "the",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "constructor",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "constructor",
      "example": "constructor",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "was",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "was",
      "example": "was",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "called",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "called",
      "example": "called",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "dataService.js",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dataService.js",
      "example": "dataService.js",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "api.example.com/data\");",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "api.example.com/data\");",
      "example": "api.example.com/data\");",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "dataService.test.js",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dataService.test.js",
      "example": "dataService.test.js",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "twice,",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "twice,",
      "example": "twice,",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "then",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "then",
      "example": "then",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "speed",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "speed",
      "example": "speed",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "up",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "up",
      "example": "up",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "tests",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "tests",
      "example": "tests",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "async",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "async",
      "example": "async",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "operation",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "operation",
      "example": "operation",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Fast-forward",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Fast-forward",
      "example": "Fast-forward",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "through",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "through",
      "example": "through",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "timeouts",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "timeouts",
      "example": "timeouts",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "final",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "final",
      "example": "final",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Optimization",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Creates highly optimized versions of frequently-used functions",
      "example": "Creates highly optimized versions of frequently-used functions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Web Workers",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memory Pools",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "TypedArrays",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Measure First",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Focus on Hot Paths",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Balance Speed and Maintainability",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Cross-Browser Testing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding the V8 Engine's Journey",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding the V8 Engine's Journey",
      "example": "Understanding the V8 Engine's Journey",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Hidden Classes: Help V8 Help You",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hidden Classes: Help V8 Help You",
      "example": "Hidden Classes: Help V8 Help You",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Performance Profiling: Making Data-Driven Decisions",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Performance Profiling: Making Data-Driven Decisions",
      "example": "Performance Profiling: Making Data-Driven Decisions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Advanced Optimization Techniques",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Advanced Optimization Techniques",
      "example": "Advanced Optimization Techniques",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Art of Performance Optimization",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Art of Performance Optimization",
      "example": "The Art of Performance Optimization",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "will",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "will",
      "example": "will",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "calculateDistance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "calculateDistance",
      "example": "calculateDistance",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "repeatedly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "repeatedly",
      "example": "repeatedly",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "to",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "to",
      "example": "to",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "createPlayerBad",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createPlayerBad",
      "example": "createPlayerBad",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "player",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "player",
      "example": "player",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "measurePerformance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "measurePerformance",
      "example": "measurePerformance",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "bigArray",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "bigArray",
      "example": "bigArray",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "result1",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "result1",
      "example": "result1",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "result2",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "result2",
      "example": "result2",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Running",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Running",
      "example": "Running",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Code",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Code",
      "example": "Code",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Quickly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Quickly",
      "example": "Quickly",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Fast",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Fast",
      "example": "Fast",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "JavaScript",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript",
      "example": "JavaScript",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "While",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "While",
      "example": "While",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Let",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Let",
      "example": "Let",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "Chrome",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Chrome",
      "example": "Chrome",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Node",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Node",
      "example": "Node",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Parsing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Parsing",
      "example": "Parsing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Abstract",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Abstract",
      "example": "Abstract",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Syntax",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Syntax",
      "example": "Syntax",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tree",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tree",
      "example": "Tree",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "AST",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "AST",
      "example": "AST",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Compile",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Compile",
      "example": "Compile",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Converts",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Converts",
      "example": "Converts",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "This",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "This",
      "example": "This",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "TurboFan",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "TurboFan",
      "example": "TurboFan",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "Math",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Math",
      "example": "Math",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "Using",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Using",
      "example": "Using",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "However",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "However",
      "example": "However",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "deoptimize",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "deoptimize",
      "example": "deoptimize",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "0",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "0",
      "example": "0",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "3",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "3",
      "example": "3",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "4",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "4",
      "example": "4",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "Consistent",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Consistent",
      "example": "Consistent",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Problematic",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Problematic",
      "example": "Problematic",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Creating",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Creating",
      "example": "Creating",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Only",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Only",
      "example": "Only",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Better",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Better",
      "example": "Better",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Use",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Use",
      "example": "Use",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "DevTools",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "DevTools",
      "example": "DevTools",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "timeEnd",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "timeEnd",
      "example": "timeEnd",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Utility",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Utility",
      "example": "Utility",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Example",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Example",
      "example": "Example",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Compare",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Compare",
      "example": "Compare",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Filter",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Filter",
      "example": "Filter",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Map",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Map",
      "example": "Map",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Filter then Map",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Filter then Map",
      "example": "Filter then Map",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Reduce",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Reduce",
      "example": "Reduce",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "postMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "postMessage",
      "example": "postMessage",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "largeArray",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "largeArray",
      "example": "largeArray",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Processed",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Processed",
      "example": "Processed",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "worker.js",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "worker.js",
      "example": "worker.js",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Processed result:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Processed result:",
      "example": "Processed result:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "processLargeData",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processLargeData",
      "example": "processLargeData",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "createFn",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createFn",
      "example": "createFn",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "resetFn",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "resetFn",
      "example": "resetFn",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "initialSize",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "initialSize",
      "example": "initialSize",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "ObjectPool",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "ObjectPool",
      "example": "ObjectPool",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "regularArray",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "regularArray",
      "example": "regularArray",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Regular",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Regular",
      "example": "Regular",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "typedArray",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "typedArray",
      "example": "typedArray",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Remember",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Remember",
      "example": "Remember",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Identify",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Identify",
      "example": "Identify",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Don",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Don",
      "example": "Don",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Optimize",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Optimize",
      "example": "Optimize",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "Consider",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Consider",
      "example": "Consider",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Profile",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Profile",
      "example": "Profile",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Write",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Write",
      "example": "Write",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Document",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Document",
      "example": "Document",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Monitor",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Monitor",
      "example": "Monitor",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Management",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Management",
      "example": "Management",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Watch",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Watch",
      "example": "Watch",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "likely",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "likely",
      "example": "likely",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "by",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "by",
      "example": "by",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "because",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "because",
      "example": "because",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "it's",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "it's",
      "example": "it's",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "called",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "called",
      "example": "called",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "with",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "with",
      "example": "with",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "similar",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "similar",
      "example": "similar",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "types",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "types",
      "example": "types",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "numbers",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "numbers",
      "example": "numbers",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "helps",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "helps",
      "example": "helps",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "numerical",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "numerical",
      "example": "numerical",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "operations",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "operations",
      "example": "operations",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "However,",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "However,",
      "example": "However,",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "passing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "passing",
      "example": "passing",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "strings",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "strings",
      "example": "strings",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "forces",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "forces",
      "example": "forces",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "\"deoptimize\"",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "\"deoptimize\"",
      "example": "\"deoptimize\"",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "handle",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "handle",
      "example": "handle",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "different",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "different",
      "example": "different",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "Problematic:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Problematic:",
      "example": "Problematic:",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "objects",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "objects",
      "example": "objects",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "inconsistent",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "inconsistent",
      "example": "inconsistent",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "property",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "property",
      "example": "property",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "orders",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "orders",
      "example": "orders",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "added",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "added",
      "example": "added",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "sometimes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "sometimes",
      "example": "sometimes",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Better:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Better:",
      "example": "Better:",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "classes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "classes",
      "example": "classes",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "ensure",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "ensure",
      "example": "ensure",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "shapes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "shapes",
      "example": "shapes",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "execution",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "execution",
      "example": "execution",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Example:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Example:",
      "example": "Example:",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "array",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "array",
      "example": "array",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "processing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processing",
      "example": "processing",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "approaches",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "approaches",
      "example": "approaches",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "filter",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "filter",
      "example": "filter",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "map",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "map",
      "example": "map",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "requires",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "requires",
      "example": "requires",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "two",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "two",
      "example": "two",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "traversals",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "traversals",
      "example": "traversals",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "reduce",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "reduce",
      "example": "reduce",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "accomplishes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "accomplishes",
      "example": "accomplishes",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "same",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "same",
      "example": "same",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "task",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "task",
      "example": "task",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "single",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "single",
      "example": "single",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Code Organization",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Error Handling",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Security Best Practices",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Code Quality",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Problem Solving",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Communication",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding ES Modules: The Building Blocks of Modern JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding ES Modules: The Building Blocks of Modern JavaScript",
      "example": "Understanding ES Modules: The Building Blocks of Modern JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Build Tools and Modern Development Workflow",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Build Tools and Modern Development Workflow",
      "example": "Build Tools and Modern Development Workflow",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "TypeScript: Adding Safety to JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "TypeScript: Adding Safety to JavaScript",
      "example": "TypeScript: Adding Safety to JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "NPM: The Package Manager for JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "NPM: The Package Manager for JavaScript",
      "example": "NPM: The Package Manager for JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Best Practices for Modern JavaScript Development",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Best Practices for Modern JavaScript Development",
      "example": "Best Practices for Modern JavaScript Development",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interview Success Tips",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Success Tips",
      "example": "Interview Success Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Arrays",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Arrays",
      "example": "Arrays",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Objects",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Objects",
      "example": "Objects",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Linked Lists",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Linked Lists",
      "example": "Linked Lists",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Stacks and Queues",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Stacks and Queues",
      "example": "Stacks and Queues",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Trees",
      "example": "Trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Graphs",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Graphs",
      "example": "Graphs",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sorting",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sorting",
      "example": "Sorting",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Searching",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Searching",
      "example": "Searching",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dynamic Programming",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dynamic Programming",
      "example": "Dynamic Programming",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Easy",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Easy",
      "example": "Easy",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Medium",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Medium",
      "example": "Medium",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Hard",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hard",
      "example": "Hard",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Code Style",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Code Style",
      "example": "Code Style",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time and Space Complexity",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time and Space Complexity",
      "example": "Time and Space Complexity",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tips for Interviews",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tips for Interviews",
      "example": "Tips for Interviews",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dynamic arrays in JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dynamic arrays in JavaScript",
      "example": "Dynamic arrays in JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common operations: push, pop, shift, unshift",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common operations: push, pop, shift, unshift",
      "example": "Common operations: push, pop, shift, unshift",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time complexity of array operations",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time complexity of array operations",
      "example": "Time complexity of array operations",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Array methods: map, filter, reduce, find",
      "type": "Verb Phrase",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Array methods: map, filter, reduce, find",
      "example": "Array methods: map, filter, reduce, find",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Key-value pairs",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Key-value pairs",
      "example": "Key-value pairs",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Object methods and properties",
      "type": "Verb Phrase",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object methods and properties",
      "example": "Object methods and properties",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Object destructuring",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object destructuring",
      "example": "Object destructuring",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Object spread operator",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object spread operator",
      "example": "Object spread operator",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Singly linked lists",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Singly linked lists",
      "example": "Singly linked lists",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Doubly linked lists",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Doubly linked lists",
      "example": "Doubly linked lists",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common operations: insertion, deletion, traversal",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common operations: insertion, deletion, traversal",
      "example": "Common operations: insertion, deletion, traversal",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Stack implementation using arrays",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Stack implementation using arrays",
      "example": "Stack implementation using arrays",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Queue implementation using arrays",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Queue implementation using arrays",
      "example": "Queue implementation using arrays",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Priority queues",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Priority queues",
      "example": "Priority queues",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Binary trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Binary trees",
      "example": "Binary trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Binary search trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Binary search trees",
      "example": "Binary search trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tree traversal (in-order, pre-order, post-order)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tree traversal (in-order, pre-order, post-order)",
      "example": "Tree traversal (in-order, pre-order, post-order)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Balanced trees (AVL, Red-Black)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Balanced trees (AVL, Red-Black)",
      "example": "Balanced trees (AVL, Red-Black)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Graph representation",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Graph representation",
      "example": "Graph representation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "BFS and DFS",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "BFS and DFS",
      "example": "BFS and DFS",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Shortest path algorithms",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Shortest path algorithms",
      "example": "Shortest path algorithms",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Minimum spanning trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Minimum spanning trees",
      "example": "Minimum spanning trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Bubble sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Bubble sort",
      "example": "Bubble sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Quick sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Quick sort",
      "example": "Quick sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Merge sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Merge sort",
      "example": "Merge sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Heap sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Heap sort",
      "example": "Heap sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time complexity comparison",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time complexity comparison",
      "example": "Time complexity comparison",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Linear search",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Linear search",
      "example": "Linear search",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Depth-first search",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Depth-first search",
      "example": "Depth-first search",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Breadth-first search",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Breadth-first search",
      "example": "Breadth-first search",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memoization",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Memoization",
      "example": "Memoization",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tabulation",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tabulation",
      "example": "Tabulation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common DP problems",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common DP problems",
      "example": "Common DP problems",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Optimization techniques",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Optimization techniques",
      "example": "Optimization techniques",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Use meaningful variable names",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Use meaningful variable names",
      "example": "Use meaningful variable names",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Write clean, readable code",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Write clean, readable code",
      "example": "Write clean, readable code",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Follow consistent formatting",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Follow consistent formatting",
      "example": "Follow consistent formatting",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Add comments where necessary",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Add comments where necessary",
      "example": "Add comments where necessary",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Big O notation",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Big O notation",
      "example": "Big O notation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time complexity analysis",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time complexity analysis",
      "example": "Time complexity analysis",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Space complexity analysis",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Space complexity analysis",
      "example": "Space complexity analysis",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "example": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[JavaScript.info](https://javascript.info/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[JavaScript.info](https://javascript.info/)",
      "example": "[JavaScript.info](https://javascript.info/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[LeetCode](https://leetcode.com/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[LeetCode](https://leetcode.com/)",
      "example": "[LeetCode](https://leetcode.com/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[HackerRank](https://www.hackerrank.com/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[HackerRank](https://www.hackerrank.com/)",
      "example": "[HackerRank](https://www.hackerrank.com/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[CodeSignal](https://codesignal.com/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[CodeSignal](https://codesignal.com/)",
      "example": "[CodeSignal](https://codesignal.com/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "add",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "add",
      "example": "add",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "multiply",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "multiply",
      "example": "multiply",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "Calculator",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Calculator",
      "example": "Calculator",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "mathUtils",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mathUtils",
      "example": "mathUtils",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "./mathUtils.js",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "./mathUtils.js",
      "example": "./mathUtils.js",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "Webpack",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Webpack",
      "example": "Webpack",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "./src/index.js",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "./src/index.js",
      "example": "./src/index.js",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "dist",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dist",
      "example": "dist",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "bundle.js",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "bundle.js",
      "example": "bundle.js",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "babel-loader",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "babel-loader",
      "example": "babel-loader",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "style-loader",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "style-loader",
      "example": "style-loader",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "css-loader",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "css-loader",
      "example": "css-loader",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "firstName",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "firstName",
      "example": "firstName",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "lastName",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "lastName",
      "example": "lastName",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Define",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Define",
      "example": "Define",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "User",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "User",
      "example": "User",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Optional",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Optional",
      "example": "Optional",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "processUser",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "processUser",
      "example": "processUser",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Now",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Now",
      "example": "Now",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "${user.firstName} ${user.lastName}",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "${user.firstName} ${user.lastName}",
      "example": "${user.firstName} ${user.lastName}",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "validUser",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "validUser",
      "example": "validUser",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "John",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "John",
      "example": "John",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Doe",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Doe",
      "example": "Doe",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "This",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "This",
      "example": "This",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "invalidUser",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "invalidUser",
      "example": "invalidUser",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Example",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Example",
      "example": "Example",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "devDependencies",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "devDependencies",
      "example": "devDependencies",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "modern-js-app",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "modern-js-app",
      "example": "modern-js-app",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "version",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "version",
      "example": "version",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "1.0.0",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "1.0.0",
      "example": "1.0.0",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "type",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "type",
      "example": "type",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "scripts",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "scripts",
      "example": "scripts",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "vite",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "vite",
      "example": "vite",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "build",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "build",
      "example": "build",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "vite build",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "vite build",
      "example": "vite build",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "jest",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "jest",
      "example": "jest",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "lint",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "lint",
      "example": "lint",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "eslint src",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "eslint src",
      "example": "eslint src",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "prepare",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "prepare",
      "example": "prepare",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "husky install",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "husky install",
      "example": "husky install",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "dependencies",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dependencies",
      "example": "dependencies",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "react",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "react",
      "example": "react",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "^18.2.0",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "^18.2.0",
      "example": "^18.2.0",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "lodash-es",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "lodash-es",
      "example": "lodash-es",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "^4.17.21",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "^4.17.21",
      "example": "^4.17.21",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "^5.0.0",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "^5.0.0",
      "example": "^5.0.0",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "^29.7.0",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "^29.7.0",
      "example": "^29.7.0",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "^8.55.0",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "^8.55.0",
      "example": "^8.55.0",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "^8.0.3",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "^8.0.3",
      "example": "^8.0.3",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "engines",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "engines",
      "example": "engines",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": ">=18.0.0",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": ">=18.0.0",
      "example": ">=18.0.0",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Implement",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Implement",
      "example": "Implement",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "fetchData",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "fetchData",
      "example": "fetchData",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Handle",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Handle",
      "example": "Handle",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "API",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "API",
      "example": "API",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Network",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Network",
      "example": "Network",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "/data",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "/data",
      "example": "/data",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "API Error:",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "API Error:",
      "example": "API Error:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Network Error:",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Network Error:",
      "example": "Network Error:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "sanitizeInput",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "sanitizeInput",
      "example": "sanitizeInput",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sanitize",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sanitize",
      "example": "Sanitize",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Content",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Content",
      "example": "Content",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Policy",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Policy",
      "example": "Policy",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "HTML",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "HTML",
      "example": "HTML",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Content-Security-Policy",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Content-Security-Policy",
      "example": "Content-Security-Policy",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "default-src 'self'",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "default-src 'self'",
      "example": "default-src 'self'",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Performance",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Performance",
      "example": "Performance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Map",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Map",
      "example": "Map",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "JSON",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JSON",
      "example": "JSON",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Break",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Break",
      "example": "Break",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Consider",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Consider",
      "example": "Consider",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Think",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Think",
      "example": "Think",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Explain",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Explain",
      "example": "Explain",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Discuss",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Discuss",
      "example": "Discuss",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Show",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Show",
      "example": "Show",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Technical",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Technical",
      "example": "Technical",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Knowledge",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Knowledge",
      "example": "Knowledge",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Stay",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Stay",
      "example": "Stay",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Remember",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Remember",
      "example": "Remember",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Companies",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Companies",
      "example": "Companies",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "By",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "By",
      "example": "By",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Conclusion",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Conclusion",
      "example": "Conclusion",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Your",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Your",
      "example": "Your",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Good",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Good",
      "example": "Good",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Table",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Table",
      "example": "Table",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Contents",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Contents",
      "example": "Contents",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Structures",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Structures",
      "example": "Structures",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Algorithms",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Algorithms",
      "example": "Algorithms",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Questions",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Questions",
      "example": "Questions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Two",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Two",
      "example": "Two",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sum",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sum",
      "example": "Sum",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Reverse",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Reverse",
      "example": "Reverse",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "String",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "String",
      "example": "String",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Valid",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Valid",
      "example": "Valid",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Parentheses",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Parentheses",
      "example": "Parentheses",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Palindrome",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Palindrome",
      "example": "Palindrome",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Check",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Check",
      "example": "Check",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "FizzBuzz",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "FizzBuzz",
      "example": "FizzBuzz",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Numbers",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Numbers",
      "example": "Numbers",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Longest",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Longest",
      "example": "Longest",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Substring",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Substring",
      "example": "Substring",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Without",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Without",
      "example": "Without",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Repeating",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Repeating",
      "example": "Repeating",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Characters",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Characters",
      "example": "Characters",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Intervals",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Intervals",
      "example": "Intervals",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "LRU",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "LRU",
      "example": "LRU",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Cache",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Cache",
      "example": "Cache",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Level",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Level",
      "example": "Level",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Order",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Order",
      "example": "Order",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Traversal",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Traversal",
      "example": "Traversal",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Median",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Median",
      "example": "Median",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sorted",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sorted",
      "example": "Sorted",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Regular",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Regular",
      "example": "Regular",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Expression",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Expression",
      "example": "Expression",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Matching",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Matching",
      "example": "Matching",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Word",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Word",
      "example": "Word",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Ladder",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Ladder",
      "example": "Ladder",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sliding",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sliding",
      "example": "Sliding",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Window",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Window",
      "example": "Window",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Maximum",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Maximum",
      "example": "Maximum",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Plan",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Plan",
      "example": "Plan",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Test",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Test",
      "example": "Test",
      "relatedTerms": [],
      "codeExample": "// webpack.config.js\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Optimize",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Optimize",
      "example": "Optimize",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Clarify",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Clarify",
      "example": "Clarify",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Start",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Start",
      "example": "Start",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Resources",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Resources",
      "example": "Resources",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "main.js",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "main.js",
      "example": "main.js",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    }
  ]
}