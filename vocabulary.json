{
  "metadata": {
    "version": "1.0.0",
    "lastUpdated": "2025-05-19T13:10:52.872Z",
    "totalTerms": 246,
    "categories": [
      "Core Concepts",
      "Modern Features",
      "Design Patterns",
      "Testing",
      "Memory",
      "Async",
      "Security",
      "Development",
      "Performance"
    ]
  },
  "vocabulary": [
    {
      "term": "Asynchronous Powerhouse",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript's event-driven, non-blocking I/O model makes it exceptional at handling concurrency without the complexities of traditional threading. The async/await syntax makes this power accessible and readable.",
      "example": "JavaScript's event-driven, non-blocking I/O model makes it exceptional at handling concurrency without the complexities of traditional threading. The async/await syntax makes this power accessible and readable.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Universal Runtime",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "With Node.js, JavaScript runs everywhere—browsers, servers, mobile, IoT devices. Mastering it makes you a versatile programmer in many contexts.",
      "example": "With Node.js, JavaScript runs everywhere—browsers, servers, mobile, IoT devices. Mastering it makes you a versatile programmer in many contexts.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Rich Ecosystem",
      "type": "Noun Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "npm is the world's largest software registry. Whether you need a full framework like React, a utility library like Lodash, or specialized tools for data visualization or server-side rendering, the ecosystem has mature solutions ready to use.",
      "example": "npm is the world's largest software registry. Whether you need a full framework like React, a utility library like Lodash, or specialized tools for data visualization or server-side rendering, the ecosystem has mature solutions ready to use.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dynamic and Flexible",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript's dynamic typing and prototype-based object system offer incredible flexibility.",
      "example": "JavaScript's dynamic typing and prototype-based object system offer incredible flexibility.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "JavaScript's Strengths:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "JavaScript's Strengths:",
      "example": "JavaScript's Strengths:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Where JavaScript Excels:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Where JavaScript Excels:",
      "example": "Where JavaScript Excels:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Where to Look Elsewhere:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Where to Look Elsewhere:",
      "example": "Where to Look Elsewhere:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interactive Web Applications",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interactive Web Applications",
      "example": "Interactive Web Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Scalable Microservices",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Scalable Microservices",
      "example": "Scalable Microservices",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Isomorphic Applications",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Isomorphic Applications",
      "example": "Isomorphic Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "CPU-Intensive Tasks",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "CPU-Intensive Tasks",
      "example": "CPU-Intensive Tasks",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Static Type Safety",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Static Type Safety",
      "example": "Static Type Safety",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memory-Critical Applications",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Memory-Critical Applications",
      "example": "Memory-Critical Applications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Multi-threaded Processing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Multi-threaded Processing",
      "example": "Multi-threaded Processing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "BigInt",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Represents integers with arbitrary precision",
      "example": "Represents integers with arbitrary precision",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Always Use Strict Equality (===)",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Handle NaN Correctly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Use Modern Optional Chaining",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Foundation: JavaScript's Type System",
      "type": "Noun Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Foundation: JavaScript's Type System",
      "example": "The Foundation: JavaScript's Type System",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Type Coercion: The Good, The Bad, and The Ugly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Type Coercion: The Good, The Bad, and The Ugly",
      "example": "Type Coercion: The Good, The Bad, and The Ugly",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Best Practices for Interview and Production Code:",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Best Practices for Interview and Production Code:",
      "example": "Best Practices for Interview and Production Code:",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Number**: Represents both integers and floating-point**: **Number**: Represents both integers and floating-point",
      "example": "Number**: Represents both integers and floating-point**: **Number**: Represents both integers and floating-point",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "String**: Immutable text data**: **String**: Immutable text data",
      "example": "String**: Immutable text data**: **String**: Immutable text data",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Boolean**: true or false**: **Boolean**: true or false",
      "example": "Boolean**: true or false**: **Boolean**: true or false",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Undefined**: Variable exists but has no assigned value**: **Undefined**: Variable exists but has no assigned value",
      "example": "Undefined**: Variable exists but has no assigned value**: **Undefined**: Variable exists but has no assigned value",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Null**: Absence of any object value**: **Null**: Absence of any object value",
      "example": "Null**: Absence of any object value**: **Null**: Absence of any object value",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Symbol**: Unique identifier, often used as object keys**: **Symbol**: Unique identifier, often used as object keys",
      "example": "Symbol**: Unique identifier, often used as object keys**: **Symbol**: Unique identifier, often used as object keys",
      "relatedTerms": [],
      "codeExample": "// The Good: Convenient string concatenation\n\"Hello \" + \"World\"  // \"Hello World\"\n\"Score: \" + 42      // \"Score: 42\"\n\n// The Bad: Unexpected results\n0 == false          // true\n\"\" == false         // true\n[] == false         // true\n[1,2] + [3,4]       // \"1,23,4\" (arrays convert to strings!)\n\n// The Ugly: Really unexpected results\n[] + {}             // \"[object Object]\"\n{} + []             // 0 (JavaScript interprets {} as an empty block!)",
      "commonQuestions": []
    },
    {
      "term": "Data Privacy (The Module Pattern)",
      "type": "Noun Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "State Management in Event Handlers",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Loop Variable Problem",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memory Management",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Lexical Scope: The Foundation",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Lexical Scope: The Foundation",
      "example": "Lexical Scope: The Foundation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding Closures: Functions with Memory",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding Closures: Functions with Memory",
      "example": "Understanding Closures: Functions with Memory",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Practical Applications: Why Closures Matter",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Practical Applications: Why Closures Matter",
      "example": "Practical Applications: Why Closures Matter",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Pitfalls and Solutions",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Pitfalls and Solutions",
      "example": "Common Pitfalls and Solutions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "outer",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "outer",
      "example": "outer",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "inner",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "inner",
      "example": "inner",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "scopes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "scopes",
      "example": "scopes",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "globalMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "globalMessage",
      "example": "globalMessage",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "outerMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "outerMessage",
      "example": "outerMessage",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "innerMessage",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "innerMessage",
      "example": "innerMessage",
      "relatedTerms": [],
      "codeExample": "// Global variables are the outermost box - always visible\nlet globalMessage = \"I'm available everywhere\";\n\nfunction outer() {\n  // This creates a new scope \"box\" inside the global scope\n  let outerMessage = \"I'm available to my children\";\n\n  function inner() {\n    // This creates the smallest \"box\", nested inside both previous ones\n    let innerMessage = \"I'm only available here\";\n\n    // We can \"look outward\" to any containing scope\n    console.log(innerMessage); // Works: Own scope\n    console.log(outerMessage); // Works: Parent scope\n    console.log(globalMessage); // Works: Global scope\n  }\n\n  inner();\n  // console.log(innerMessage); // Error: Can't look into inner scopes\n}\n\n// console.log(outerMessage); // Error: Can't look into function scopes",
      "commonQuestions": []
    },
    {
      "term": "createGreeting",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createGreeting",
      "example": "createGreeting",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "forms",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "forms",
      "example": "forms",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greetJohn",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greetJohn",
      "example": "greetJohn",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greetJane",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greetJane",
      "example": "greetJane",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "greeting",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greeting",
      "example": "greeting",
      "relatedTerms": [],
      "codeExample": "function createGreeting(name) {\n  let greeting = \"Hello, \" + name;\n\n  // This function forms a closure, capturing 'greeting'\n  return function () {\n    console.log(greeting);\n  };\n}\n\n// Let's create two different greetings\nconst greetJohn = createGreeting(\"John\");\nconst greetJane = createGreeting(\"Jane\");\n\n// Each function \"remembers\" its own version of 'greeting'\ngreetJohn(); // Prints: \"Hello, John\"\ngreetJane(); // Prints: \"Hello, Jane\"",
      "commonQuestions": []
    },
    {
      "term": "The Event Loop: JavaScript's Heart",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Event Loop: JavaScript's Heart",
      "example": "The Event Loop: JavaScript's Heart",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Evolution of Asynchronous Programming",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Evolution of Asynchronous Programming",
      "example": "The Evolution of Asynchronous Programming",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "1. Callback Style: The Traditional Approach",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "1. Callback Style: The Traditional Approach",
      "example": "1. Callback Style: The Traditional Approach",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "2. Promises: A Step Forward",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "2. Promises: A Step Forward",
      "example": "2. Promises: A Step Forward",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "3. Async/Await: Modern Elegance",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "3. Async/Await: Modern Elegance",
      "example": "3. Async/Await: Modern Elegance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tips for Coding Interviews",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tips for Coding Interviews",
      "example": "Tips for Coding Interviews",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Call Stack (the 'road' for synchronous code)",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Call Stack (the 'road' for synchronous code)",
      "example": "The Call Stack (the 'road' for synchronous code)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Task Queue (the 'waiting area' for longer tasks)",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Task Queue (the 'waiting area' for longer tasks)",
      "example": "The Task Queue (the 'waiting area' for longer tasks)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Microtask Queue (the 'express lane' for high-priority tasks)",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Microtask Queue (the 'express lane' for high-priority tasks)",
      "example": "The Microtask Queue (the 'express lane' for high-priority tasks)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "getUserData",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "getUserData",
      "example": "getUserData",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "user",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "user",
      "example": "user",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "loadUserProfile",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "loadUserProfile",
      "example": "loadUserProfile",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "loadMultipleProfiles",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "loadMultipleProfiles",
      "example": "loadMultipleProfiles",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "posts",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "posts",
      "example": "posts",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "comments",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "comments",
      "example": "comments",
      "relatedTerms": [],
      "codeExample": "function getUserData(userId, callback) {\n  setTimeout(() => {\n    const user = { id: userId, name: \"Sarah\" };\n    callback(null, user);\n  }, 1000);\n}\n\n// Using callbacks can get messy quickly\ngetUserData(123, (error, user) => {\n  if (error) {\n    handleError(error);\n    return;\n  }\n  getUserPosts(user.id, (error, posts) => {\n    if (error) {\n      handleError(error);\n      return;\n    }\n    getPostComments(posts[0].id, (error, comments) => {\n      if (error) {\n        handleError(error);\n        return;\n      }\n      displayComments(comments);\n    });\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "profiles",
      "type": "Subject",
      "category": "Async",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "profiles",
      "example": "profiles",
      "relatedTerms": [],
      "codeExample": "async function loadUserProfile(userId) {\n  try {\n    const user = await getUserData(userId);\n    const posts = await getUserPosts(user.id);\n    const comments = await getPostComments(posts[0].id);\n\n    return {\n      user,\n      posts,\n      comments,\n    };\n  } catch (error) {\n    console.error(\"Failed to load profile:\", error);\n    throw error;\n  }\n}\n\n// Running operations in parallel\nasync function loadMultipleProfiles(userIds) {\n  try {\n    const profiles = await Promise.all(\n      userIds.map((id) => loadUserProfile(id))\n    );\n    return profiles;\n  } catch (error) {\n    console.error(\"Failed to load profiles:\", error);\n    throw error;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "The Foundation: Prototypal Inheritance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Foundation: Prototypal Inheritance",
      "example": "The Foundation: Prototypal Inheritance",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Modern Way: ES6 Classes",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Modern Way: ES6 Classes",
      "example": "The Modern Way: ES6 Classes",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Modern Features: Private Fields and Methods",
      "type": "Verb Phrase",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Modern Features: Private Fields and Methods",
      "example": "Modern Features: Private Fields and Methods",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Preparing for Coding Interviews",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Preparing for Coding Interviews",
      "example": "Preparing for Coding Interviews",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "animal",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "animal",
      "example": "animal",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "dog",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dog",
      "example": "dog",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Animal",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Animal",
      "example": "Animal",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "itself",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "itself",
      "example": "itself",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "Dog",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dog",
      "example": "Dog",
      "relatedTerms": [],
      "codeExample": "// Create a base object with some shared functionality\nconst animal = {\n  makeSound() {\n    return \"Some sound\";\n  },\n  eat() {\n    return \"Eating...\";\n  },\n};\n\n// Create a more specific object\nconst dog = {\n  bark() {\n    return \"Woof!\";\n  },\n};\n\n// Set animal as dog's prototype\nObject.setPrototypeOf(dog, animal);\n\n// Now dog can use methods from both itself and its prototype\nconsole.log(dog.bark()); // \"Woof!\" (found on dog)\nconsole.log(dog.makeSound()); // \"Some sound\" (found on animal)\nconsole.log(dog.eat()); // \"Eating...\" (found on animal)\nconsole.log(dog.dance); // undefined (not found anywhere in the chain)",
      "commonQuestions": []
    },
    {
      "term": "BankAccount",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "BankAccount",
      "example": "BankAccount",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "account",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "account",
      "example": "account",
      "relatedTerms": [],
      "codeExample": "class BankAccount {\n  // Private fields start with #\n  #balance = 0;\n  #transactionHistory = [];\n\n  // Private method\n  #validateAmount(amount) {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      throw new Error(\"Invalid amount\");\n    }\n  }\n\n  deposit(amount) {\n    this.#validateAmount(amount);\n    this.#balance += amount;\n    this.#transactionHistory.push({\n      type: \"deposit\",\n      amount,\n      date: new Date(),\n    });\n    return this.#balance;\n  }\n\n  // Public getter provides read-only access to private field\n  get balance() {\n    return this.#balance;\n  }\n}\n\nconst account = new BankAccount();\naccount.deposit(100);\nconsole.log(account.balance); // 100\n// console.log(account.#balance); // SyntaxError: Private field",
      "commonQuestions": []
    },
    {
      "term": "Arrow Functions and the Evolution of this",
      "type": "Verb Phrase",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Arrow Functions and the Evolution of this",
      "example": "Arrow Functions and the Evolution of this",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Destructuring: Elegant Data Extraction",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Destructuring: Elegant Data Extraction",
      "example": "Destructuring: Elegant Data Extraction",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Spread Operator: Immutable Operations Made Simple",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Spread Operator: Immutable Operations Made Simple",
      "example": "The Spread Operator: Immutable Operations Made Simple",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Template Literals: Beyond Simple String Concatenation",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Template Literals: Beyond Simple String Concatenation",
      "example": "Template Literals: Beyond Simple String Concatenation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Nullish Coalescing",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Nullish Coalescing",
      "example": "Nullish Coalescing",
      "relatedTerms": [],
      "codeExample": "// Old way with ||\nconst count = value || 0; // Falls back if value is false-y\n\n// With nullish coalescing\nconst count = value ?? 0; // Falls back only if value is null/undefined\n\n// Chaining multiple fallbacks\nconst value = process.env.VALUE ?? defaultValue ?? 0;",
      "commonQuestions": []
    },
    {
      "term": "Interview Success Tips",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Success Tips",
      "example": "Interview Success Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "addClickListener",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "addClickListener",
      "example": "addClickListener",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "addClickListenerArrow",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "addClickListenerArrow",
      "example": "addClickListenerArrow",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "Button",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Button",
      "example": "Button",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "obj",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "obj",
      "example": "obj",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "user",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "user",
      "example": "user",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "arr1",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "arr1",
      "example": "arr1",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "arr2",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "arr2",
      "example": "arr2",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "combined",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "combined",
      "example": "combined",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "clone",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "clone",
      "example": "clone",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "defaults",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "defaults",
      "example": "defaults",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "userPrefs",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "userPrefs",
      "example": "userPrefs",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "settings",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "settings",
      "example": "settings",
      "relatedTerms": [],
      "codeExample": "// Array spread\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\n\n// Clone array\nconst clone = [...arr1];\n\n// Object spread\nconst defaults = { theme: \"dark\", language: \"en\" };\nconst userPrefs = { language: \"fr\" };\nconst settings = { ...defaults, ...userPrefs };",
      "commonQuestions": []
    },
    {
      "term": "name",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "name",
      "example": "name",
      "relatedTerms": [],
      "codeExample": "class Button {\n  constructor() {\n    this.clicked = false;\n    this.text = \"Click me\";\n  }\n\n  // Problem with traditional function\n  addClickListener() {\n    document.addEventListener(\"click\", function () {\n      this.clicked = true; // 'this' is wrong!\n    });\n  }\n\n  // Solution with arrow function\n  addClickListenerArrow() {\n    document.addEventListener(\"click\", () => {\n      this.clicked = true; // 'this' is correct!\n    });\n  }\n}\n\n// Arrow Function Caveats\nconst obj = {\n  name: \"Object\",\n  // Don't use arrow functions as methods!\n  badMethod: () => {\n    console.log(this.name); // undefined\n  },\n  // Do use traditional functions as methods\n  goodMethod() {\n    console.log(this.name); // \"Object\"\n  },\n};",
      "commonQuestions": []
    },
    {
      "term": "age",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "age",
      "example": "age",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "greeting",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "greeting",
      "example": "greeting",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "email",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "email",
      "example": "email",
      "relatedTerms": [],
      "codeExample": "const name = \"John\";\nconst age = 30;\n\n// Basic usage\nconst greeting = `Hello, ${name}!`;\n\n// Multi-line strings\nconst email = `\nDear ${name},\n\nThis is a multi-line\nemail template.\n\nBest regards,\nThe Team\n`;",
      "commonQuestions": []
    },
    {
      "term": "count",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "count",
      "example": "count",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "value",
      "type": "Subject",
      "category": "Modern Features",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "value",
      "example": "value",
      "relatedTerms": [],
      "codeExample": "const user = {\n  name: \"John\",\n  age: 30,\n  address: {\n    street: \"123 Main St\",\n    city: \"Boston\",\n  },\n};\n\n// Basic destructuring\nconst { name, age } = user;\n\n// Nested destructuring\nconst {\n  address: { city },\n} = user;\n\n// Renaming variables\nconst { name: userName } = user;\n\n// Default values\nconst { country = \"USA\" } = user;\n\n// Rest in destructuring\nconst { name, ...rest } = user;",
      "commonQuestions": []
    },
    {
      "term": "Release",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "When an object is no longer reachable through any references in your application, it becomes eligible for garbage collection.",
      "example": "When an object is no longer reachable through any references in your application, it becomes eligible for garbage collection.",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Performance Panel",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Monitor memory usage over time",
      "example": "Monitor memory usage over time",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Memory Cycle: Allocate, Use, Release",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Memory Cycle: Allocate, Use, Release",
      "example": "The Memory Cycle: Allocate, Use, Release",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding the Garbage Collector",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding the Garbage Collector",
      "example": "Understanding the Garbage Collector",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Memory Leaks and How to Avoid Them",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Memory Leaks and How to Avoid Them",
      "example": "Common Memory Leaks and How to Avoid Them",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "1. The Global Variable Trap",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "1. The Global Variable Trap",
      "example": "1. The Global Variable Trap",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "2. Closure Complications",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "2. Closure Complications",
      "example": "2. Closure Complications",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Debugging Memory Issues",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Debugging Memory Issues",
      "example": "Debugging Memory Issues",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interview Tips",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Tips",
      "example": "Interview Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "leak",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "leak",
      "example": "leak",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "noLeak",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "noLeak",
      "example": "noLeak",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "localVariable",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "localVariable",
      "example": "localVariable",
      "relatedTerms": [],
      "codeExample": "// Accidental global (without 'let' or 'const')\nfunction leak() {\n  accidentalGlobal = \"I leak memory\"; // Oops! This is now a global variable\n}\n\n// Solution: Always use strict mode and proper declarations\n(\"use strict\");\nfunction noLeak() {\n  let localVariable = \"I get cleaned up\"; // Properly scoped variable\n}",
      "commonQuestions": []
    },
    {
      "term": "createLeak",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createLeak",
      "example": "createLeak",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "return",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "return",
      "example": "return",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "createEfficientClosure",
      "type": "Adjective",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createEfficientClosure",
      "example": "createEfficientClosure",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "largeData",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "largeData",
      "example": "largeData",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "length",
      "type": "Subject",
      "category": "Memory",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "length",
      "example": "length",
      "relatedTerms": [],
      "codeExample": "// Problematic closure\nfunction createLeak() {\n  const largeData = new Array(1000000);\n\n  // We cannot free largeData, because it's needed by function\n  return function () {\n    console.log(largeData.length);\n  };\n}\n\n// Better approach\nfunction createEfficientClosure() {\n  const largeData = new Array(1000000);\n  const length = largeData.length; // Only keep what we need\n\n  return function () {\n    console.log(length);\n  };\n}",
      "commonQuestions": []
    },
    {
      "term": "Observer Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Module Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Proxy Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Singleton Pattern: One and Only",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Singleton Pattern: One and Only",
      "example": "The Singleton Pattern: One and Only",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Factory Pattern: Creating Objects Flexibly",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Factory Pattern: Creating Objects Flexibly",
      "example": "The Factory Pattern: Creating Objects Flexibly",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dependency Injection",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dependency Injection",
      "example": "Dependency Injection",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Choosing the Right Pattern",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Choosing the Right Pattern",
      "example": "Choosing the Right Pattern",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Design Patterns in Modern JavaScript",
      "type": "Noun Phrase",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Design Patterns in Modern JavaScript",
      "example": "Common Design Patterns in Modern JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "createConnectionSingleton",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createConnectionSingleton",
      "example": "createConnectionSingleton",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "Database",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Database",
      "example": "Database",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "instance",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "instance",
      "example": "instance",
      "relatedTerms": [],
      "codeExample": "const createConnectionSingleton = () => {\n  // Instance is scoped to the module\n  let instance = null;\n\n  return {\n    getInstance() {\n      if (!instance) {\n        instance = {\n          connect() {\n            /* connection logic */\n          },\n          disconnect() {\n            /* disconnection logic */\n          },\n        };\n      }\n      return instance;\n    },\n  };\n};\n\nexport const Database = createConnectionSingleton();",
      "commonQuestions": []
    },
    {
      "term": "UIFactory",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "UIFactory",
      "example": "UIFactory",
      "relatedTerms": [],
      "codeExample": "class UIFactory {\n  createButton(type) {\n    // Centralized creation logic for all button types\n    switch (type) {\n      case \"primary\":\n        return new PrimaryButton();\n      case \"secondary\":\n        return new SecondaryButton();\n      case \"danger\":\n        return new DangerButton();\n      default:\n        throw new Error(\"Unknown button type\");\n    }\n  }\n\n  createInput(type) {\n    // Similar centralized logic for input fields\n    switch (type) {\n      case \"text\":\n        return new TextInput();\n      case \"number\":\n        return new NumberInput();\n      default:\n        throw new Error(\"Unknown input type\");\n    }\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "ShoppingService",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "ShoppingService",
      "example": "ShoppingService",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "total",
      "type": "Subject",
      "category": "Design Patterns",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "total",
      "example": "total",
      "relatedTerms": [],
      "codeExample": "class ShoppingService {\n  constructor(cartRepository, paymentService) {\n    // Dependencies are injected rather than created internally\n    this.cartRepository = cartRepository;\n    this.paymentService = paymentService;\n  }\n\n  async checkout(cart) {\n    const total = await this.cartRepository.calculateTotal(cart);\n    return this.paymentService.processPayment(total);\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "Test Structure",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Mocking Strategy",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Async Testing",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding Jest: The Swiss Army Knife of Testing",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding Jest: The Swiss Army Knife of Testing",
      "example": "Understanding Jest: The Swiss Army Knife of Testing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Art of Mocking: Controlling Your Test Environment",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Art of Mocking: Controlling Your Test Environment",
      "example": "The Art of Mocking: Controlling Your Test Environment",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Testing Asynchronous Code: Promises and Timing",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Testing Asynchronous Code: Promises and Timing",
      "example": "Testing Asynchronous Code: Promises and Timing",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common Pitfalls and Best Practices",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common Pitfalls and Best Practices",
      "example": "Common Pitfalls and Best Practices",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interview Tips",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Tips",
      "example": "Interview Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "add",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "add",
      "example": "add",
      "relatedTerms": [],
      "codeExample": "// calculator.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// calculator.test.js\nimport { add } from \"./calculator\";\n\ndescribe(\"Calculator\", () => {\n  test(\"adds two numbers correctly\", () => {\n    expect(add(2, 3)).toBe(5);\n    expect(add(-1, 1)).toBe(0);\n    expect(add(0, 0)).toBe(0);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "UserService",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "UserService",
      "example": "UserService",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "response",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "response",
      "example": "response",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockApiClient",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockApiClient",
      "example": "mockApiClient",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "mockDate",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "mockDate",
      "example": "mockDate",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "service",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "service",
      "example": "service",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "profile",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "profile",
      "example": "profile",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "DataService",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "DataService",
      "example": "DataService",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "data",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "data",
      "example": "data",
      "relatedTerms": [],
      "codeExample": "// userService.js\nexport class UserService {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n  }\n\n  async getUserProfile(userId) {\n    const response = await this.apiClient.get(`/users/${userId}`);\n    return {\n      ...response.data,\n      lastAccessedAt: new Date(),\n    };\n  }\n}\n\n// userService.test.js\ndescribe(\"UserService\", () => {\n  test(\"getUserProfile adds lastAccessedAt to profile\", async () => {\n    // Create a mock API client\n    const mockApiClient = {\n      get: jest.fn().mockResolvedValue({\n        data: { id: 123, name: \"Alice\" },\n      }),\n    };\n\n    // Mock the Date constructor\n    const mockDate = new Date(\"2024-02-08\");\n    jest.spyOn(global, \"Date\").mockImplementation(() => mockDate);\n\n    const service = new UserService(mockApiClient);\n    const profile = await service.getUserProfile(123);\n\n    expect(profile).toEqual({\n      id: 123,\n      name: \"Alice\",\n      lastAccessedAt: mockDate,\n    });\n\n    // Verify the API was called correctly\n    expect(mockApiClient.get).toHaveBeenCalledWith(\"/users/123\");\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "dataPromise",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "dataPromise",
      "example": "dataPromise",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "result",
      "type": "Subject",
      "category": "Testing",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "result",
      "example": "result",
      "relatedTerms": [],
      "codeExample": "// dataService.js\nexport class DataService {\n  async fetchData() {\n    const response = await fetch(\"https://api.example.com/data\");\n    return response.json();\n  }\n\n  async processDataWithRetry(maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const data = await this.fetchData();\n        return data;\n      } catch (error) {\n        if (i === maxRetries - 1) throw error;\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\n// dataService.test.js\ndescribe(\"DataService\", () => {\n  test(\"processDataWithRetry succeeds after temporary failure\", async () => {\n    const service = new DataService();\n\n    // Mock fetch to fail twice, then succeed\n    global.fetch = jest\n      .fn()\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockRejectedValueOnce(new Error(\"Network error\"))\n      .mockResolvedValueOnce({\n        json: () => Promise.resolve({ data: \"success\" }),\n      });\n\n    // Mock setTimeout to speed up tests\n    jest.useFakeTimers();\n\n    // Start the async operation\n    const dataPromise = service.processDataWithRetry();\n\n    // Fast-forward through all timeouts\n    await jest.runAllTimers();\n\n    // Wait for the final result\n    const result = await dataPromise;\n\n    expect(result).toEqual({ data: \"success\" });\n    expect(fetch).toHaveBeenCalledTimes(3);\n  });\n});",
      "commonQuestions": []
    },
    {
      "term": "Optimization",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Creates highly optimized versions of frequently-used functions",
      "example": "Creates highly optimized versions of frequently-used functions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Web Workers",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memory Pools",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "TypedArrays",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Measure First",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Focus on Hot Paths",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Balance Speed and Maintainability",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Cross-Browser Testing",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding the V8 Engine's Journey",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding the V8 Engine's Journey",
      "example": "Understanding the V8 Engine's Journey",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Hidden Classes: Help V8 Help You",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hidden Classes: Help V8 Help You",
      "example": "Hidden Classes: Help V8 Help You",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Performance Profiling: Making Data-Driven Decisions",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Performance Profiling: Making Data-Driven Decisions",
      "example": "Performance Profiling: Making Data-Driven Decisions",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Advanced Optimization Techniques",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Advanced Optimization Techniques",
      "example": "Advanced Optimization Techniques",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "The Art of Performance Optimization",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "The Art of Performance Optimization",
      "example": "The Art of Performance Optimization",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "will",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "will",
      "example": "will",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "calculateDistance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "calculateDistance",
      "example": "calculateDistance",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "repeatedly",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "repeatedly",
      "example": "repeatedly",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "to",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "to",
      "example": "to",
      "relatedTerms": [],
      "codeExample": "// This function will likely be optimized by TurboFan\n// because it's called frequently with similar types\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\n\n// Using the function repeatedly with numbers\n// helps V8 optimize it for numerical operations\nfor (let i = 0; i < 10000; i++) {\n  calculateDistance(0, 0, 3, 4);\n}\n\n// However, passing strings forces V8 to \"deoptimize\"\n// the function to handle different types\ncalculateDistance(\"0\", \"0\", \"3\", \"4\");",
      "commonQuestions": []
    },
    {
      "term": "createPlayerBad",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "createPlayerBad",
      "example": "createPlayerBad",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "player",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "player",
      "example": "player",
      "relatedTerms": [],
      "codeExample": "// Problematic: Creating objects with inconsistent property orders\nfunction createPlayerBad(name, score) {\n  const player = {};\n  player.name = name;\n  if (score > 0) {\n    player.score = score; // Only added sometimes\n  }\n  player.level = 1;\n  return player;\n}\n\n// Better: Use classes to ensure consistent object shapes\nclass Player {\n  constructor(name, score = 0) {\n    this.name = name;\n    this.score = score;\n    this.level = 1;\n  }\n}",
      "commonQuestions": []
    },
    {
      "term": "measurePerformance",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "measurePerformance",
      "example": "measurePerformance",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "bigArray",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "bigArray",
      "example": "bigArray",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "result1",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "result1",
      "example": "result1",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "result2",
      "type": "Subject",
      "category": "Core Concepts",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "result2",
      "example": "result2",
      "relatedTerms": [],
      "codeExample": "// Utility function to measure execution time\nfunction measurePerformance(fn, label) {\n  console.time(label);\n  fn();\n  console.timeEnd(label);\n}\n\n// Example: Compare different array processing approaches\nconst bigArray = Array.from({ length: 1000000 }, (_, i) => i);\n\nmeasurePerformance(() => {\n  // Using filter then map requires two array traversals\n  const result1 = bigArray.filter((x) => x % 2 === 0).map((x) => x * 2);\n}, \"Filter then Map\");\n\nmeasurePerformance(() => {\n  // Using reduce accomplishes the same task in a single traversal\n  const result2 = bigArray.reduce((acc, x) => {\n    if (x % 2 === 0) {\n      acc.push(x * 2);\n    }\n    return acc;\n  }, []);\n}, \"Reduce\");",
      "commonQuestions": []
    },
    {
      "term": "Code Organization",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Error Handling",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Security Best Practices",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Code Quality",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Problem Solving",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Communication",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "",
      "example": "",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Understanding ES Modules: The Building Blocks of Modern JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Understanding ES Modules: The Building Blocks of Modern JavaScript",
      "example": "Understanding ES Modules: The Building Blocks of Modern JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Build Tools and Modern Development Workflow",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Build Tools and Modern Development Workflow",
      "example": "Build Tools and Modern Development Workflow",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "TypeScript: Adding Safety to JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "TypeScript: Adding Safety to JavaScript",
      "example": "TypeScript: Adding Safety to JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "NPM: The Package Manager for JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "NPM: The Package Manager for JavaScript",
      "example": "NPM: The Package Manager for JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Best Practices for Modern JavaScript Development",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Best Practices for Modern JavaScript Development",
      "example": "Best Practices for Modern JavaScript Development",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Interview Success Tips",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Interview Success Tips",
      "example": "Interview Success Tips",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Arrays",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Arrays",
      "example": "Arrays",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Objects",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Objects",
      "example": "Objects",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Linked Lists",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Linked Lists",
      "example": "Linked Lists",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Stacks and Queues",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Stacks and Queues",
      "example": "Stacks and Queues",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Trees",
      "example": "Trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Graphs",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Graphs",
      "example": "Graphs",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Sorting",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Sorting",
      "example": "Sorting",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Searching",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Searching",
      "example": "Searching",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dynamic Programming",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dynamic Programming",
      "example": "Dynamic Programming",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Easy",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Easy",
      "example": "Easy",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Medium",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Medium",
      "example": "Medium",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Hard",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Hard",
      "example": "Hard",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Code Style",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Code Style",
      "example": "Code Style",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time and Space Complexity",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time and Space Complexity",
      "example": "Time and Space Complexity",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tips for Interviews",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tips for Interviews",
      "example": "Tips for Interviews",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Dynamic arrays in JavaScript",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Dynamic arrays in JavaScript",
      "example": "Dynamic arrays in JavaScript",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common operations: push, pop, shift, unshift",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common operations: push, pop, shift, unshift",
      "example": "Common operations: push, pop, shift, unshift",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time complexity of array operations",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time complexity of array operations",
      "example": "Time complexity of array operations",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Array methods: map, filter, reduce, find",
      "type": "Verb Phrase",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Array methods: map, filter, reduce, find",
      "example": "Array methods: map, filter, reduce, find",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Key-value pairs",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Key-value pairs",
      "example": "Key-value pairs",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Object methods and properties",
      "type": "Verb Phrase",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object methods and properties",
      "example": "Object methods and properties",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Object destructuring",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object destructuring",
      "example": "Object destructuring",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Object spread operator",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Object spread operator",
      "example": "Object spread operator",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Singly linked lists",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Singly linked lists",
      "example": "Singly linked lists",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Doubly linked lists",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Doubly linked lists",
      "example": "Doubly linked lists",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common operations: insertion, deletion, traversal",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common operations: insertion, deletion, traversal",
      "example": "Common operations: insertion, deletion, traversal",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Stack implementation using arrays",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Stack implementation using arrays",
      "example": "Stack implementation using arrays",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Queue implementation using arrays",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Queue implementation using arrays",
      "example": "Queue implementation using arrays",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Priority queues",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Priority queues",
      "example": "Priority queues",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Binary trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Binary trees",
      "example": "Binary trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Binary search trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Binary search trees",
      "example": "Binary search trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tree traversal (in-order, pre-order, post-order)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tree traversal (in-order, pre-order, post-order)",
      "example": "Tree traversal (in-order, pre-order, post-order)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Balanced trees (AVL, Red-Black)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Balanced trees (AVL, Red-Black)",
      "example": "Balanced trees (AVL, Red-Black)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Graph representation",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Graph representation",
      "example": "Graph representation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "BFS and DFS",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "BFS and DFS",
      "example": "BFS and DFS",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Shortest path algorithms",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Shortest path algorithms",
      "example": "Shortest path algorithms",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Minimum spanning trees",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Minimum spanning trees",
      "example": "Minimum spanning trees",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Bubble sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Bubble sort",
      "example": "Bubble sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Quick sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Quick sort",
      "example": "Quick sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Merge sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Merge sort",
      "example": "Merge sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Heap sort",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Heap sort",
      "example": "Heap sort",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time complexity comparison",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time complexity comparison",
      "example": "Time complexity comparison",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Linear search",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Linear search",
      "example": "Linear search",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Depth-first search",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Depth-first search",
      "example": "Depth-first search",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Breadth-first search",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Breadth-first search",
      "example": "Breadth-first search",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Memoization",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Memoization",
      "example": "Memoization",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Tabulation",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Tabulation",
      "example": "Tabulation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Common DP problems",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Common DP problems",
      "example": "Common DP problems",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Optimization techniques",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Optimization techniques",
      "example": "Optimization techniques",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Use meaningful variable names",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Use meaningful variable names",
      "example": "Use meaningful variable names",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Write clean, readable code",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Write clean, readable code",
      "example": "Write clean, readable code",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Follow consistent formatting",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Follow consistent formatting",
      "example": "Follow consistent formatting",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Add comments where necessary",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Add comments where necessary",
      "example": "Add comments where necessary",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Big O notation",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Big O notation",
      "example": "Big O notation",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Time complexity analysis",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Time complexity analysis",
      "example": "Time complexity analysis",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "Space complexity analysis",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Space complexity analysis",
      "example": "Space complexity analysis",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "example": "[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[JavaScript.info](https://javascript.info/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[JavaScript.info](https://javascript.info/)",
      "example": "[JavaScript.info](https://javascript.info/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[LeetCode](https://leetcode.com/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[LeetCode](https://leetcode.com/)",
      "example": "[LeetCode](https://leetcode.com/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[HackerRank](https://www.hackerrank.com/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[HackerRank](https://www.hackerrank.com/)",
      "example": "[HackerRank](https://www.hackerrank.com/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "[CodeSignal](https://codesignal.com/)",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "[CodeSignal](https://codesignal.com/)",
      "example": "[CodeSignal](https://codesignal.com/)",
      "relatedTerms": [],
      "codeExample": "",
      "commonQuestions": []
    },
    {
      "term": "add",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "add",
      "example": "add",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "multiply",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "multiply",
      "example": "multiply",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    },
    {
      "term": "Calculator",
      "type": "Subject",
      "category": "Development",
      "difficulty": "Beginner",
      "frequency": "High",
      "interviewImportance": "Critical",
      "description": "Calculator",
      "example": "Calculator",
      "relatedTerms": [],
      "codeExample": "// mathUtils.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}\n\nexport default class Calculator {\n  add(a, b) {\n    return add(a, b);\n  }\n  multiply(a, b) {\n    return multiply(a, b);\n  }\n}\n\n// main.js\nimport { add, multiply } from \"./mathUtils.js\";\nimport Calculator from \"./mathUtils.js\";",
      "commonQuestions": []
    }
  ]
}